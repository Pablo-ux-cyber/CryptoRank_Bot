#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ Market Breadth
"""

import sys
sys.path.insert(0, '/home/runner/workspace')

def test_message_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¢–û–ß–ù–´–ô —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    
    print("=== –¢–ï–°–¢ –§–û–†–ú–ê–¢–ê –°–û–û–ë–©–ï–ù–ò–Ø ===")
    
    try:
        from load_dotenv import load_dotenv
        load_dotenv()
        
        from scheduler import SensorTowerScheduler
        scheduler = SensorTowerScheduler()
        
        # 1. –†–µ–π—Ç–∏–Ω–≥
        from json_rank_reader import get_rank_from_json
        current_rank = get_rank_from_json()
        print(f"–†–µ–π—Ç–∏–Ω–≥: {current_rank}")
        
        # 2. Fear & Greed
        fear_greed_data = scheduler.fear_greed_tracker.get_fear_greed_index()
        print(f"Fear & Greed: {fear_greed_data['value'] if fear_greed_data else '–û—à–∏–±–∫–∞'}")
        
        # 3. –ò–º–∏—Ç–∏—Ä—É–µ–º Market Breadth –¥–∞–Ω–Ω—ã–µ
        market_breadth_data = {
            'signal': 'üü°',
            'condition': 'Neutral',
            'percentage': 36.4
        }
        
        print("\n--- –¢–û–ß–ù–´–ô –§–û–†–ú–ê–¢ –ö–ê–ö –¢–†–ï–ë–£–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ---")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–û–ß–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_parts = []
        
        # 1. Coinbase Appstore Rank (–¢–û–ß–ù–û –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        message_parts.append(f"üîº Coinbase Appstore Rank: {current_rank}")
        
        # 2. Fear & Greed (–¢–û–ß–ù–û –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        if fear_greed_data:
            fear_greed_message = scheduler.fear_greed_tracker.format_fear_greed_message(fear_greed_data)
            if fear_greed_message:
                message_parts.append(fear_greed_message)
        
        # 3. Market by 200MA (–¢–û–ß–ù–û –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        # –§–û–†–ú–ê–¢: Market by 200MA: üü° Neutral: 36.4%
        # –ò –≤—Å—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        fake_chart_url = "https://files.catbox.moe/example.png"
        market_message = f"[Market by 200MA: {market_breadth_data['signal']} {market_breadth_data['condition']}: {market_breadth_data['percentage']}%]({fake_chart_url})"
        message_parts.append(market_message)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message = "\n\n".join(message_parts)
        
        print(f"\n--- –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï ---")
        print(final_message)
        print(f"\n--- –ö–ê–ö –î–û–õ–ñ–ù–û –í–´–ì–õ–Ø–î–ï–¢–¨ –í TELEGRAM ---")
        print("üîº Coinbase Appstore Rank: 139")
        print("")
        print("Fear & Greed: üòè Greed: 70/100")
        print("üü¢üü¢üü¢üü¢üü¢üü¢üü¢‚ñë‚ñë‚ñë")
        print("")
        print("Market by 200MA: üü° Neutral: 36.4%  <- –í–°–Ø –°–¢–†–û–ö–ê –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–ê–Ø")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"\n--- –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ---")
        success = scheduler.telegram_bot.send_message(final_message)
        
        if success:
            print("‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        return success, final_message
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False, None

if __name__ == "__main__":
    test_message_format()