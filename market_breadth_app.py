import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import os
from crypto_analyzer_cryptocompare import CryptoAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Crypto Market Breadth Indicator",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞")
st.markdown("**–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–ø-50 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤—ã—à–µ MA200**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
@st.cache_resource
def init_components():
    analyzer = CryptoAnalyzer(cache=None)
    return analyzer

analyzer = init_components()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
top_n = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –º–æ–Ω–µ—Ç", 10, 100, 50, 5)
ma_period = st.sidebar.slider("–ü–µ—Ä–∏–æ–¥ MA", 50, 300, 200, 10)
history_days = st.sidebar.slider("–î–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 180, 1460, 1095, 30)
st.sidebar.caption("üìÖ –ü–µ—Ä–∏–æ–¥—ã: 365 –¥–Ω–µ–π ‚âà 1 –≥–æ–¥, 730 –¥–Ω–µ–π ‚âà 2 –≥–æ–¥–∞, 1095 –¥–Ω–µ–π ‚âà 3 –≥–æ–¥–∞, 1460 –¥–Ω–µ–π ‚âà 4 –≥–æ–¥–∞")

# –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
st.sidebar.markdown("**–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞:**")
col1, col2, col3, col4 = st.sidebar.columns(4)
with col1:
    if st.button("6–º", help="6 –º–µ—Å—è—Ü–µ–≤"):
        st.session_state.history_days = 180
        st.rerun()
with col2:
    if st.button("1–≥", help="1 –≥–æ–¥"):
        st.session_state.history_days = 365
        st.rerun()
with col3:
    if st.button("2–≥", help="2 –≥–æ–¥–∞"):
        st.session_state.history_days = 730
        st.rerun()
with col4:
    if st.button("3–≥", help="3 –≥–æ–¥–∞"):
        st.session_state.history_days = 1095
        st.rerun()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.markdown("---")
st.sidebar.header("üìä –î–∞–Ω–Ω—ã–µ")
st.sidebar.info("–í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CryptoCompare API")

# –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
st.sidebar.markdown("---")
if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
    st.session_state['start_analysis'] = True

# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
if st.session_state.get('start_analysis', False):
    # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∞–Ω–∞–ª–∏–∑–∞
    st.session_state['start_analysis'] = False
    
    with st.container():
        try:
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –º–æ–Ω–µ—Ç
            status_text.text("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
            progress_bar.progress(10)
            
            top_coins = analyzer.get_top_coins(top_n)
            if not top_coins:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç")
                st.stop()
            
            st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(top_coins)} –º–æ–Ω–µ—Ç")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            status_text.text("üìà –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            progress_bar.progress(30)
            
            historical_data = analyzer.load_historical_data(
                top_coins, 
                ma_period + history_days + 100,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∑–∞–ø–∞—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                progress_callback=lambda p: progress_bar.progress(30 + int(p * 0.5))
            )
            
            if not historical_data:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                st.stop()
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            status_text.text("üßÆ –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞...")
            progress_bar.progress(80)
            
            indicator_data = analyzer.calculate_market_breadth(
                historical_data, 
                ma_period, 
                history_days
            )
            
            if indicator_data.empty:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
                st.stop()
            
            progress_bar.progress(100)
            status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session state
            st.session_state['indicator_data'] = indicator_data
            st.session_state['historical_data'] = historical_data
            st.session_state['analysis_complete'] = True
            st.session_state['analysis_params'] = {
                'top_n': top_n,
                'ma_period': ma_period,
                'history_days': history_days
            }
            
            time.sleep(1)
            progress_bar.empty()
            status_text.empty()
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            st.stop()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.get('analysis_complete', False):
        indicator_data = st.session_state['indicator_data']
        historical_data = st.session_state['historical_data']
        params = st.session_state.get('analysis_params', {})
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        current_value = indicator_data['percentage'].iloc[-1]
        avg_value = indicator_data['percentage'].mean()
        max_value = indicator_data['percentage'].max()
        min_value = indicator_data['percentage'].min()
        
        with col1:
            st.metric("üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å", f"{current_value:.1f}%")
        with col2:
            st.metric("üìà –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", f"{avg_value:.1f}%")
        with col3:
            st.metric("üîù –ú–∞–∫—Å–∏–º—É–º", f"{max_value:.1f}%")
        with col4:
            st.metric("üîª –ú–∏–Ω–∏–º—É–º", f"{min_value:.1f}%")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if current_value >= 80:
            market_condition = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
            condition_color = "red"
        elif current_value <= 20:
            market_condition = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
            condition_color = "green"
        else:
            market_condition = "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
            condition_color = "orange"
        
        st.markdown(f"### –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: <span style='color:{condition_color}'>{market_condition}</span>", unsafe_allow_html=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        st.markdown("### üìà Bitcoin –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞")
        
        from plotly.subplots import make_subplots
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
        fig = make_subplots(
            rows=2, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.1,
            subplot_titles=('–¶–µ–Ω–∞ Bitcoin (USD)', f'–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA{params.get("ma_period", ma_period)} (%)'),
            row_heights=[0.4, 0.6]
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ Bitcoin (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if 'BTC' in historical_data:
            btc_data = historical_data['BTC'].reset_index()
            fig.add_trace(
                go.Scatter(
                    x=btc_data['Date'],
                    y=btc_data['Close'],
                    mode='lines',
                    name='Bitcoin',
                    line=dict(color='orange', width=2),
                    hovertemplate='<b>Bitcoin</b><br>–î–∞—Ç–∞: %{x}<br>–¶–µ–Ω–∞: $%{y:,.0f}<extra></extra>'
                ),
                row=1, col=1
            )
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞
        fig.add_trace(
            go.Scatter(
                x=indicator_data.index,
                y=indicator_data['percentage'],
                mode='lines+markers',
                name='–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞',
                line=dict(color='cyan', width=3),
                marker=dict(size=4),
                hovertemplate='<b>–®–∏—Ä–∏–Ω–∞ —Ä—ã–Ω–∫–∞</b><br>–î–∞—Ç–∞: %{x}<br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{y:.1f}%<extra></extra>'
            ),
            row=2, col=1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        fig.add_hline(y=80, line_dash="dash", line_color="red", opacity=0.7, row=2, col=1,
                      annotation_text="–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (80%)", annotation_position="top right")
        fig.add_hline(y=20, line_dash="dash", line_color="green", opacity=0.7, row=2, col=1,
                      annotation_text="–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (20%)", annotation_position="bottom right")
        fig.add_hline(y=50, line_dash="dot", line_color="yellow", opacity=0.5, row=2, col=1,
                      annotation_text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ (50%)", annotation_position="middle right")
        
        # –ó–∞–ª–∏–≤–∫–∞ –∑–æ–Ω
        fig.add_hrect(y0=80, y1=100, fillcolor="red", opacity=0.1, row=2, col=1)
        fig.add_hrect(y0=0, y1=20, fillcolor="green", opacity=0.1, row=2, col=1)
        fig.add_hrect(y0=20, y1=80, fillcolor="yellow", opacity=0.05, row=2, col=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            height=800,
            showlegend=True,
            hovermode='x unified',
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π
        fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')
        fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã Bitcoin
        fig.update_yaxes(tickformat='$,.0f', row=1, col=1)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        fig.update_yaxes(tickformat='.0f', ticksuffix='%', row=2, col=1)
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        st.markdown("### üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
            fig_hist = px.histogram(
                indicator_data, 
                x='percentage',
                nbins=20,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞",
                labels={'percentage': '–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π'}
            )
            fig_hist.update_layout(height=400)
            st.plotly_chart(fig_hist, use_container_width=True)
        
        with col2:
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            st.markdown("#### –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å")
            fig_gauge = go.Figure(go.Indicator(
                mode="gauge+number+delta",
                value=current_value,
                domain={'x': [0, 1], 'y': [0, 1]},
                title={'text': "–®–∏—Ä–∏–Ω–∞ —Ä—ã–Ω–∫–∞ (%)"},
                delta={'reference': avg_value, 'suffix': '% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ'},
                gauge={
                    'axis': {'range': [None, 100]},
                    'bar': {'color': "cyan"},
                    'steps': [
                        {'range': [0, 20], 'color': "lightgreen"},
                        {'range': [20, 80], 'color': "lightyellow"},
                        {'range': [80, 100], 'color': "lightcoral"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 90
                    }
                }
            ))
            fig_gauge.update_layout(height=400)
            st.plotly_chart(fig_gauge, use_container_width=True)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        st.markdown("### üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        available_coins = list(historical_data.keys())
        selected_coins = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º:",
            available_coins,
            default=['BTC', 'ETH'] if all(coin in available_coins for coin in ['BTC', 'ETH']) else available_coins[:2]
        )
        
        if selected_coins:
            # –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            correlations = {}
            for coin in selected_coins:
                if coin in historical_data:
                    coin_data = historical_data[coin].reset_index()
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
                    merged_data = pd.merge(
                        indicator_data.reset_index(),
                        coin_data[['Date', 'Close']],
                        left_on='Date',
                        right_on='Date',
                        how='inner'
                    )
                    if len(merged_data) > 10:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                        corr = merged_data['percentage'].corr(merged_data['Close'])
                        correlations[coin] = corr
            
            if correlations:
                # –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                corr_df = pd.DataFrame(list(correlations.items()), columns=['–ú–æ–Ω–µ—Ç–∞', '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'])
                fig_corr = px.bar(
                    corr_df, 
                    x='–ú–æ–Ω–µ—Ç–∞', 
                    y='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
                    title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞ —Å —Ü–µ–Ω–∞–º–∏ –º–æ–Ω–µ—Ç",
                    color='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
                    color_continuous_scale='RdYlBu_r'
                )
                fig_corr.update_layout(height=400)
                st.plotly_chart(fig_corr, use_container_width=True)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                st.dataframe(corr_df.style.format({'–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è': '{:.3f}'}))
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.markdown("### üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # CSV —ç–∫—Å–ø–æ—Ä—Ç
            csv_data = indicator_data.to_csv()
            st.download_button(
                label="üìÅ –°–∫–∞—á–∞—Ç—å CSV",
                data=csv_data,
                file_name=f"market_breadth_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # JSON —ç–∫—Å–ø–æ—Ä—Ç
            json_data = indicator_data.to_json(orient='records', date_format='iso')
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å JSON",
                data=json_data,
                file_name=f"market_breadth_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
if not st.session_state.get('analysis_complete', False):
    st.info("üëà –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown(
    "üí° **–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ —Ç–æ–ø-N, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –≤—ã—à–µ —Å–≤–æ–µ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π. "
    "–í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (>80%) –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞, –Ω–∏–∑–∫–∏–µ (<20%) ‚Äî –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å."
)