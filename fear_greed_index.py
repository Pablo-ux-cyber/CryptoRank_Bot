import requests
import logging
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('sensortower_bot')

class FearGreedIndexTracker:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫–µ—Ä –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        """
        self.api_url = "https://api.alternative.me/fng/"
        self.last_data = None
        
    def get_fear_greed_index(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –∏ –µ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info("Fetching Fear & Greed Index data")
            response = requests.get(self.api_url, params={"limit": 1}, timeout=10)
            
            if response.status_code != 200:
                logger.error(f"Failed to fetch Fear & Greed Index: HTTP {response.status_code}")
                return self._create_fallback_data()
                
            data = response.json()
            
            if "data" not in data or not data["data"]:
                logger.error("Invalid response format from Fear & Greed API")
                return self._create_fallback_data()
                
            index_data = data["data"][0]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            value = int(index_data.get("value", "0"))
            value_classification = index_data.get("value_classification", "Unknown")
            timestamp = int(index_data.get("timestamp", "0"))
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –≤ –¥–∞—Ç—É
            date = datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d")
            
            result = {
                "value": value,
                "classification": value_classification,
                "date": date,
                "timestamp": timestamp
            }
            
            logger.info(f"Successfully fetched Fear & Greed Index: {value} ({value_classification})")
            self.last_data = result
            return result
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Request to Fear & Greed API failed: {str(e)}")
            return self._create_fallback_data()
        except Exception as e:
            logger.error(f"Error fetching Fear & Greed Index: {str(e)}")
            return self._create_fallback_data()
            
    def _create_fallback_data(self):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if self.last_data:
            logger.info("Using last known Fear & Greed data")
            return self.last_data
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("Using fallback Fear & Greed data")
        return {
            "value": 45,
            "classification": "Fear",
            "date": datetime.now().strftime("%Y-%m-%d"),
            "timestamp": int(time.time())
        }
        
    def format_fear_greed_message(self, fear_greed_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            fear_greed_data (dict): –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        if not fear_greed_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏\\."
            
        value = fear_greed_data.get("value", 0)
        classification = fear_greed_data.get("classification", "Unknown")
        date = fear_greed_data.get("date", "Unknown Date")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2
        classification = classification.replace("-", "\\-").replace(".", "\\.").replace("!", "\\!")
        
        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
        if classification == "Extreme Fear":
            emoji = "üò±"
            progress = self._generate_progress_bar(value, 100, 10, "üî¥")
        elif classification == "Fear":
            emoji = "üò®"
            progress = self._generate_progress_bar(value, 100, 10, "üü†")
        elif classification == "Neutral":
            emoji = "üòê"
            progress = self._generate_progress_bar(value, 100, 10, "üü°")
        elif classification == "Greed":
            emoji = "üòè"
            progress = self._generate_progress_bar(value, 100, 10, "üü¢")
        elif classification == "Extreme Greed":
            emoji = "ü§ë"
            progress = self._generate_progress_bar(value, 100, 10, "üü¢")
        else:
            emoji = "‚ùì"
            progress = self._generate_progress_bar(value, 100, 10, "‚ö™")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä *Crypto Fear & Greed Index*\n"
        message += f"üìÖ *–î–∞—Ç–∞:* {date}\n\n"
        message += f"{emoji} *–ó–Ω–∞—á–µ–Ω–∏–µ:* {value}/100\n"
        message += f"*–°—Ç–∞—Ç—É—Å:* {classification}\n"
        message += f"{progress}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        message += "\n*–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:*\n"
        message += "–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ\\. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤, –∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å \\- –ø—Ä–∏–∑–Ω–∞–∫–æ–º –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω–Ω–æ—Å—Ç–∏\\."
        
        return message
        
    def _generate_progress_bar(self, value, max_value, length, filled_char="‚ñà", empty_char="‚ñë"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        
        Args:
            value (int): –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            max_value (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            length (int): –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            filled_char (str): –°–∏–º–≤–æ–ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
            empty_char (str): –°–∏–º–≤–æ–ª –¥–ª—è –ø—É—Å—Ç–æ–π —á–∞—Å—Ç–∏
            
        Returns:
            str: –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        """
        filled_length = int(length * value / max_value)
        bar = filled_char * filled_length + empty_char * (length - filled_length)
        return bar