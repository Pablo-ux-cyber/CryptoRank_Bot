#!/usr/bin/env python3

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import time

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from crypto_analyzer_cryptocompare import CryptoAnalyzer
from data_cache import DataCache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞")
st.markdown("---")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@st.cache_resource
def init_components():
    cache = DataCache()
    analyzer = CryptoAnalyzer(cache)
    return cache, analyzer

cache, analyzer = init_components()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
top_n = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –º–æ–Ω–µ—Ç", min_value=10, max_value=100, value=50, step=5)
ma_period = st.sidebar.slider("–ü–µ—Ä–∏–æ–¥ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π", min_value=50, max_value=300, value=200, step=10)
history_days = st.sidebar.slider("–î–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", min_value=180, max_value=1460, value=365, step=30)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ
cache_info = cache.get_cache_info()
st.sidebar.subheader("üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ")
st.sidebar.write(f"–†–∞–∑–º–µ—Ä –∫–µ—à–∞: {cache_info['cache_size_mb']:.1f} –ú–ë")
st.sidebar.write(f"–ú–æ–Ω–µ—Ç –≤ –∫–µ—à–µ: {cache_info['cached_coins_count']}")

if st.sidebar.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"):
    cache.clear_all()
    st.sidebar.success("–ö–µ—à –æ—á–∏—â–µ–Ω")
    st.experimental_rerun()

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary"):
    with st.spinner('–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...'):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –º–æ–Ω–µ—Ç
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        status_text.text('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...')
        progress_bar.progress(10)
        
        top_coins = analyzer.get_top_coins(top_n)
        if not top_coins:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç")
            st.stop()
        
        st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(top_coins)} —Ç–æ–ø –º–æ–Ω–µ—Ç")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        status_text.text('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
        progress_bar.progress(30)
        
        def progress_callback(current, total):
            progress = 30 + int((current / total) * 50)
            progress_bar.progress(progress)
            status_text.text(f'–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {current}/{total} –º–æ–Ω–µ—Ç')
        
        historical_data = analyzer.load_historical_data(
            top_coins, 
            ma_period + history_days + 100,
            progress_callback
        )
        
        if not historical_data:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            st.stop()
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        status_text.text('–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞...')
        progress_bar.progress(80)
        
        indicator_data = analyzer.calculate_market_breadth(
            historical_data, 
            ma_period, 
            history_days
        )
        
        if indicator_data.empty:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
            st.stop()
        
        progress_bar.progress(100)
        status_text.text('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!')
        time.sleep(1)
        progress_bar.empty()
        status_text.empty()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        summary = analyzer.get_market_summary(indicator_data)
        current_value = summary['current_value']
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if current_value >= 80:
            signal = "üî¥"
            condition = "–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
            description = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
            color = "red"
        elif current_value <= 20:
            signal = "üü¢"
            condition = "–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å" 
            description = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∏–∂–µ MA200, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫"
            color = "green"
        else:
            signal = "üü°"
            condition = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
            description = "–†—ã–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è"
            color = "orange"
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.markdown("---")
        st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–¢–µ–∫—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä",
                value=f"{current_value:.1f}%",
                delta=f"{signal} {condition}"
            )
        
        with col2:
            st.metric(
                label="–ú–æ–Ω–µ—Ç –≤—ã—à–µ MA200",
                value=f"{summary['coins_above_ma']}/{len(historical_data)}"
            )
        
        with col3:
            st.metric(
                label="–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                value=f"{summary['avg_value']:.1f}%"
            )
        
        with col4:
            st.metric(
                label="–î–∏–∞–ø–∞–∑–æ–Ω",
                value=f"{summary['min_value']:.1f}% - {summary['max_value']:.1f}%"
            )
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        if color == "red":
            st.error(f"{signal} {description}")
        elif color == "green":
            st.success(f"{signal} {description}")
        else:
            st.warning(f"{signal} {description}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≤–∞—à —Ç–æ—á–Ω—ã–π –∫–æ–¥)
        fig = make_subplots(
            rows=2, cols=1,
            subplot_titles=('Bitcoin (BTC)', '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞'),
            vertical_spacing=0.08,
            row_heights=[0.4, 0.6]
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ Bitcoin —Å–≤–µ—Ä—Ö—É
        if 'BTC' in historical_data:
            btc_data = historical_data['BTC'].copy()
            btc_data['date'] = pd.to_datetime(btc_data['date'])
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–º—É –∂–µ –ø–µ—Ä–∏–æ–¥—É
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=history_days)
            btc_data = btc_data[(btc_data['date'].dt.date >= start_date) & (btc_data['date'].dt.date <= end_date)]
            
            if not btc_data.empty:
                fig.add_trace(
                    go.Scatter(
                        x=btc_data['date'],
                        y=btc_data['price'],
                        mode='lines',
                        name='Bitcoin',
                        line=dict(color='#F7931A', width=2),
                        hovertemplate='<b>%{x}</b><br>–¶–µ–Ω–∞ BTC: $%{y:,.0f}<extra></extra>'
                    ),
                    row=1, col=1
                )
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–Ω–∏–∑—É  
        indicator_data_reset = indicator_data.reset_index()
        fig.add_trace(
            go.Scatter(
                x=indicator_data_reset['date'],
                y=indicator_data_reset['percentage'],
                mode='lines',
                name='–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã',
                line=dict(color='#1f77b4', width=2),
                hovertemplate='<b>%{x}</b><br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{y:.1f}%<extra></extra>'
            ),
            row=2, col=1
        )
        
        # –õ–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –Ω–∏–∂–Ω–µ–º –≥—Ä–∞—Ñ–∏–∫–µ
        fig.add_hline(
            y=80, 
            line_dash="dash", 
            line_color="red",
            annotation_text="–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (80%)",
            annotation_position="bottom right",
            row=2, col=1
        )
        
        fig.add_hline(
            y=20, 
            line_dash="dash", 
            line_color="green",
            annotation_text="–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (20%)",
            annotation_position="top right",
            row=2, col=1
        )
        
        fig.add_hline(
            y=50, 
            line_dash="dot", 
            line_color="gray",
            annotation_text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ (50%)",
            annotation_position="middle right",
            row=2, col=1
        )
        
        # –ó–æ–Ω—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        fig.add_hrect(
            y0=80, y1=100, 
            fillcolor="red", opacity=0.1,
            annotation_text="–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å", 
            annotation_position="top left",
            row=2, col=1
        )
        fig.add_hrect(
            y0=0, y1=20, 
            fillcolor="green", opacity=0.1,
            annotation_text="–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å", 
            annotation_position="bottom left",
            row=2, col=1
        )
        fig.add_hrect(
            y0=20, y1=80, 
            fillcolor="gray", opacity=0.05,
            row=2, col=1
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            height=800,
            showlegend=True,
            hovermode='x unified',
            template='plotly_dark'
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig.update_yaxes(title_text="–¶–µ–Ω–∞ Bitcoin (USD)", row=1, col=1)
        fig.update_yaxes(title_text="–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA (%)", row=2, col=1, range=[0, 100])
        fig.update_xaxes(title_text="–î–∞—Ç–∞", row=2, col=1)
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏ (–≤–∞—à –∫–æ–¥)
        st.subheader("üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å Bitcoin")
        
        if 'BTC' in historical_data:
            btc_data = historical_data['BTC'].copy()
            btc_data['date'] = pd.to_datetime(btc_data['date'])
            btc_data = btc_data.set_index('date')
            
            correlations = []
            
            for coin_symbol, df in historical_data.items():
                if coin_symbol != 'BTC' and df is not None:
                    df = df.copy()
                    df['date'] = pd.to_datetime(df['date'])
                    df = df.set_index('date')
                    
                    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º
                    merged = btc_data[['price']].join(df[['price']], rsuffix='_alt', how='inner')
                    
                    if len(merged) > 10:
                        correlation = merged['price'].corr(merged['price_alt'])
                        correlations.append({
                            '–ú–æ–Ω–µ—Ç–∞': coin_symbol,
                            '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC': f"{correlation:.3f}"
                        })
            
            if correlations:
                corr_df = pd.DataFrame(correlations)
                corr_df = corr_df.sort_values('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC', ascending=False)
                st.dataframe(corr_df, use_container_width=True)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
st.markdown("---")
st.subheader("‚ÑπÔ∏è –û –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞")

col1, col2 = st.columns(2)

with col1:
    st.markdown("""
    **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:**
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –≤—ã—à–µ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π
    - –ü–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–¥–æ—Ä–æ–≤—å–µ —Ä—ã–Ω–∫–∞
    - –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    """)

with col2:
    st.markdown("""
    **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:**
    - üî¥ **>80%**: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
    - üü° **20-80%**: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞, —Ä—ã–Ω–æ–∫ –≤ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–∏  
    - üü¢ **<20%**: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫
    """)

st.markdown("""
**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞:**
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ CryptoCompare API
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å Bitcoin
""")