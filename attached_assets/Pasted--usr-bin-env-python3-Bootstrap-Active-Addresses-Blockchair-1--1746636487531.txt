#!/usr/bin/env python3
"""
Bootstrap + –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Active Addresses —á–µ—Ä–µ–∑ Blockchair.

1) –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.
2) –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
3) –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å 7-–¥–Ω–µ–≤–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º –∏ –¥–∞—ë—Ç –ø–æ–Ω—è—Ç–Ω—ã–π –≤—ã–≤–æ–¥.
"""

import requests, csv, os, time, statistics

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CHAINS        = ['bitcoin', 'ethereum']
SYMBOL_MAP    = {'bitcoin': 'BTC', 'ethereum': 'ETH'}
HISTORY_DIR   = 'history'
DAYS_FOR_AVG  = 7
BOOTSTRAP_DAYS = 30  # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±–ª—É–º–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

os.makedirs(HISTORY_DIR, exist_ok=True)

def fetch_current(chain):
    url = f'https://api.blockchair.com/{chain}/stats'
    r   = requests.get(url); r.raise_for_status()
    return r.json()['data']['active_addresses']

def fetch_historical(chain, days):
    url    = f'https://api.blockchair.com/{chain}/charts/active_addresses'
    params = {'days': days}
    r      = requests.get(url, params=params); r.raise_for_status()
    return r.json()['data']  # dict: {'2025-04-08': 345000, ...}

def history_file(chain):
    return os.path.join(HISTORY_DIR, f'history_{chain}.csv')

def write_bootstrap(chain):
    data = fetch_historical(chain, BOOTSTRAP_DAYS)
    path = history_file(chain)
    with open(path, 'w', newline='') as f:
        w = csv.writer(f)
        for date, val in sorted(data.items()):
            w.writerow([date, val])

def read_history(chain):
    path = history_file(chain)
    if not os.path.exists(path): return []
    with open(path, newline='') as f:
        return [int(r[1]) for r in csv.reader(f) if len(r)>=2]

def append_today(chain, today):
    path = history_file(chain)
    date = time.strftime('%Y-%m-%d')
    hist = read_history(chain)
    if hist and open(path).read().splitlines()[-1].startswith(date): return
    with open(path, 'a', newline='') as f:
        csv.writer(f).writerow([date, today])

def interpret(today, avg):
    if avg == 0: return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
    delta = (today-avg)/avg*100
    if delta <= -10: return f"‚Üì {delta:+.1f}% ‚Äî –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å"
    if delta <=  -2: return f"‚Üì {delta:+.1f}% ‚Äî –û—Å–ª–∞–±–µ–≤—à–∏–π —Å–ø—Ä–æ—Å"
    if delta <   +2: return f"‚Üî {delta:+.1f}% ‚Äî –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
    if delta <  +10: return f"‚Üë {delta:+.1f}% ‚Äî –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å"
    return             f"‚Üë {delta:+.1f}% ‚Äî –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å"

def main():
    print(f"\nüìä Active Addresses Monitor ‚Äî {time.strftime('%Y-%m-%d')}\n")
    for chain in CHAINS:
        symbol = SYMBOL_MAP[chain]
        path   = history_file(chain)
        # Bootstrap, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞
        if not os.path.exists(path):
            print(f"‚Äì –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ {BOOTSTRAP_DAYS} –¥–Ω–µ–π –¥–ª—è {symbol}‚Ä¶")
            write_bootstrap(chain)
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—á–∏—Ç–∞–µ–º 7-–¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        hist = read_history(chain)
        avg7 = statistics.mean(hist[-DAYS_FOR_AVG:]) if len(hist)>=DAYS_FOR_AVG else 0
        # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ append
        today = fetch_current(chain)
        append_today(chain, today)
        # –í—ã–≤–æ–¥
        print(f"‚Ä¢ {symbol}: {today:,} –∞–¥—Ä–µ—Å–æ–≤")
        if avg7:
            print(f"    –°—Ä–µ–¥–Ω–µ–µ –∑–∞ {DAYS_FOR_AVG} –¥–Ω: {avg7:,.0f}")
            print("   ", interpret(today, avg7))
        else:
            print("    –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ.")
    print()

if __name__ == '__main__':
    main()
