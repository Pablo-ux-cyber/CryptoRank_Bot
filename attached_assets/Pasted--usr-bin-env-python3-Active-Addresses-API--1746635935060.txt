#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Active Addresses —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API Blockchair.
–•—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ CSV-—Ñ–∞–π–ª–∞—Ö –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å 7-–¥–Ω–µ–≤–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º.
"""
import requests
import csv
import os
import time
import statistics

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CHAINS = ['bitcoin', 'ethereum']  # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ü–µ–ø–æ—á–∫–∏
SYMBOL_MAP = {'bitcoin': 'BTC', 'ethereum': 'ETH'}
HISTORY_DIR = 'history'            # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
DAYS_FOR_AVG = 7                   # —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –≤ –¥–Ω—è—Ö

# –ü–æ—Ä–æ–≥–∏ (%) –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ vs 7-–¥–Ω–µ–≤–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
THRESHOLDS = [(-10, '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å'),
              (-2,  '–û—Å–ª–∞–±–µ–≤—à–∏–π —Å–ø—Ä–æ—Å'),
              (2,   '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'),
              (10,  '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å'),
              (100, '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å')]

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(HISTORY_DIR, exist_ok=True)

def fetch_active_addresses(chain: str) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å–µ—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –±–µ–∑ –∫–ª—é—á–µ–π.
    """
    url = f'https://api.blockchair.com/{chain}/stats'
    resp = requests.get(url)
    resp.raise_for_status()
    data = resp.json().get('data', {})
    return data.get('active_addresses', 0)


def history_file(chain: str) -> str:
    """–ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏."""
    return os.path.join(HISTORY_DIR, f'history_{chain}.csv')


def read_history(chain: str) -> list[int]:
    """–ß–∏—Ç–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (—Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π) –∏–∑ CSV."""
    path = history_file(chain)
    if not os.path.exists(path):
        return []
    with open(path, newline='') as f:
        reader = csv.reader(f)
        return [int(row[1]) for row in reader if len(row) >= 2]


def append_history(chain: str, value: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü CSV, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç."""
    path = history_file(chain)
    today = time.strftime('%Y-%m-%d')
    rows = []
    if os.path.exists(path):
        with open(path, newline='') as f:
            rows = list(csv.reader(f))
        if rows and rows[-1][0] == today:
            return  # —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    with open(path, 'a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([today, value])


def interpret_vs_avg(today: int, avg: float) -> (float, str):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç today's —Å–æ —Å—Ä–µ–¥–Ω–∏–º avg, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–ª—å—Ç—É –≤ % –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É.
    """
    if avg == 0:
        return 0.0, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'
    delta_pct = (today - avg) / avg * 100
    for thresh, label in THRESHOLDS:
        if delta_pct <= thresh:
            return delta_pct, label
    return delta_pct, THRESHOLDS[-1][1]


def main():
    print(f"\nüìä Active Addresses Monitor (Blockchair) ‚Äî {time.strftime('%Y-%m-%d')}\n")
    for chain in CHAINS:
        symbol = SYMBOL_MAP.get(chain, chain.upper())
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ DAYS_FOR_AVG –¥–Ω–µ–π
        hist = read_history(chain)
        recent = hist[-DAYS_FOR_AVG:] if len(hist) >= DAYS_FOR_AVG else hist
        avg7 = statistics.mean(recent) if recent else 0

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            today = fetch_active_addresses(chain)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {symbol}: {e}")
            continue

        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ —Å—Ä–µ–¥–Ω–µ–≥–æ
        delta_pct, label = interpret_vs_avg(today, avg7)

        # –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"‚Ä¢ {symbol}: {today:,} –∞–¥—Ä–µ—Å–æ–≤")
        if avg7:
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –∑–∞ {len(recent)} –¥–Ω: {avg7:,.0f} ‚Üí Œî {delta_pct:+.1f}% ‚Äî {label}")
        else:
            print("  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        append_history(chain, today)

if __name__ == '__main__':
    main()
