import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import os
from crypto_analyzer_cryptocompare import CryptoAnalyzer
from data_cache import DataCache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Crypto Market Breadth Indicator",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞")
st.markdown("**–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–ø-50 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤—ã—à–µ MA200**")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
@st.cache_resource
def init_components():
    cache = DataCache()
    analyzer = CryptoAnalyzer(cache)
    return cache, analyzer

cache, analyzer = init_components()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
top_n = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –º–æ–Ω–µ—Ç", 10, 100, 50, 5)
ma_period = st.sidebar.slider("–ü–µ—Ä–∏–æ–¥ MA", 50, 300, 200, 10)
history_days = st.sidebar.slider("–î–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 180, 1460, 1095, 30)
st.sidebar.caption("üìÖ –ü–µ—Ä–∏–æ–¥—ã: 365 –¥–Ω–µ–π ‚âà 1 –≥–æ–¥, 730 –¥–Ω–µ–π ‚âà 2 –≥–æ–¥–∞, 1095 –¥–Ω–µ–π ‚âà 3 –≥–æ–¥–∞, 1460 –¥–Ω–µ–π ‚âà 4 –≥–æ–¥–∞")

# –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
st.sidebar.markdown("**–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞:**")
col1, col2, col3, col4 = st.sidebar.columns(4)
with col1:
    if st.button("6–º", help="6 –º–µ—Å—è—Ü–µ–≤"):
        st.session_state.history_days = 180
        st.rerun()
with col2:
    if st.button("1–≥", help="1 –≥–æ–¥"):
        st.session_state.history_days = 365
        st.rerun()
with col3:
    if st.button("3–≥ ‚≠ê", help="3 –≥–æ–¥–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)"):
        st.session_state.history_days = 1095
        st.rerun()
with col4:
    if st.button("4–≥", help="4 –≥–æ–¥–∞"):
        st.session_state.history_days = 1460
        st.rerun()

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å session state
if 'history_days' in st.session_state:
    history_days = st.session_state.history_days

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
col1, col2 = st.sidebar.columns(2)
with col1:
    run_analysis = st.button("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")
with col2:
    clear_cache = st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à")

if clear_cache:
    cache.clear_all()
    st.sidebar.success("–ö–µ—à –æ—á–∏—â–µ–Ω!")
    st.rerun()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ
cache_info = cache.get_cache_info()
if cache_info:
    st.sidebar.markdown("### üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ")
    st.sidebar.text(f"–ú–æ–Ω–µ—Ç –≤ –∫–µ—à–µ: {cache_info['coins_count']}")
    st.sidebar.text(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {cache_info['last_update']}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if run_analysis or st.session_state.get('analysis_complete', False):
    
    if run_analysis:
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –º–æ–Ω–µ—Ç
            status_text.text("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
            progress_bar.progress(10)
            
            top_coins = analyzer.get_top_coins(top_n)
            if not top_coins:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç")
                st.stop()
            
            st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(top_coins)} –º–æ–Ω–µ—Ç")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            status_text.text("üìà –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            progress_bar.progress(30)
            
            historical_data = analyzer.load_historical_data(
                top_coins, 
                ma_period + history_days + 100,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∑–∞–ø–∞—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                progress_callback=lambda p: progress_bar.progress(30 + int(p * 0.5))
            )
            
            if not historical_data:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                st.stop()
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            status_text.text("üßÆ –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞...")
            progress_bar.progress(80)
            
            indicator_data = analyzer.calculate_market_breadth(
                historical_data, 
                ma_period, 
                history_days
            )
            
            if indicator_data.empty:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
                st.stop()
            
            progress_bar.progress(100)
            status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session state
            st.session_state['indicator_data'] = indicator_data
            st.session_state['historical_data'] = historical_data
            st.session_state['analysis_complete'] = True
            st.session_state['analysis_params'] = {
                'top_n': top_n,
                'ma_period': ma_period,
                'history_days': history_days
            }
            
            time.sleep(1)
            progress_bar.empty()
            status_text.empty()
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            st.stop()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.get('analysis_complete', False):
        indicator_data = st.session_state['indicator_data']
        historical_data = st.session_state['historical_data']
        params = st.session_state.get('analysis_params', {})
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        current_value = indicator_data['percentage'].iloc[-1]
        avg_value = indicator_data['percentage'].mean()
        max_value = indicator_data['percentage'].max()
        min_value = indicator_data['percentage'].min()
        
        with col1:
            st.metric("üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å", f"{current_value:.1f}%")
        with col2:
            st.metric("üìà –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", f"{avg_value:.1f}%")
        with col3:
            st.metric("üîù –ú–∞–∫—Å–∏–º—É–º", f"{max_value:.1f}%")
        with col4:
            st.metric("üîª –ú–∏–Ω–∏–º—É–º", f"{min_value:.1f}%")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        if current_value >= 80:
            market_condition = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
            condition_color = "red"
        elif current_value <= 20:
            market_condition = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
            condition_color = "green"
        else:
            market_condition = "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
            condition_color = "orange"
        
        st.markdown(f"### –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: <span style='color:{condition_color}'>{market_condition}</span>", unsafe_allow_html=True)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        st.markdown("### üìà Bitcoin –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞")
        
        from plotly.subplots import make_subplots
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
        fig = make_subplots(
            rows=2, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.1,
            subplot_titles=('–¶–µ–Ω–∞ Bitcoin (USD)', f'–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA{params.get("ma_period", ma_period)} (%)'),
            row_heights=[0.4, 0.6]
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ Bitcoin —Å–≤–µ—Ä—Ö—É
        if 'BTC' in historical_data:
            btc_data = historical_data['BTC'].copy()
            btc_data['date'] = pd.to_datetime(btc_data['date'])
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–º—É –∂–µ –ø–µ—Ä–∏–æ–¥—É
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=history_days)
            btc_data = btc_data[(btc_data['date'].dt.date >= start_date) & (btc_data['date'].dt.date <= end_date)]
            
            if not btc_data.empty:
                fig.add_trace(
                    go.Scatter(
                        x=btc_data['date'],
                        y=btc_data['price'],
                        mode='lines',
                        name='Bitcoin',
                        line=dict(color='#F7931A', width=2),
                        hovertemplate='<b>%{x}</b><br>–¶–µ–Ω–∞ BTC: $%{y:,.0f}<extra></extra>'
                    ),
                    row=1, col=1
                )
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–Ω–∏–∑—É
        fig.add_trace(
            go.Scatter(
                x=indicator_data['date'],
                y=indicator_data['percentage'],
                mode='lines',
                name='–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã',
                line=dict(color='#1f77b4', width=2),
                hovertemplate='<b>%{x}</b><br>–ü—Ä–æ—Ü–µ–Ω—Ç: %{y:.1f}%<extra></extra>'
            ),
            row=2, col=1
        )
        
        # –õ–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –Ω–∏–∂–Ω–µ–º –≥—Ä–∞—Ñ–∏–∫–µ
        fig.add_hline(
            y=80, 
            line_dash="dash", 
            line_color="red",
            annotation_text="–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (80%)",
            annotation_position="bottom right",
            row=2, col=1
        )
        
        fig.add_hline(
            y=20, 
            line_dash="dash", 
            line_color="green",
            annotation_text="–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (20%)",
            annotation_position="top right",
            row=2, col=1
        )
        
        # –û–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
        fig.add_hrect(
            y0=20, y1=80,
            fillcolor="lightgray",
            opacity=0.1,
            layer="below",
            line_width=0,
            row=2, col=1
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        fig.update_layout(
            height=700,
            showlegend=True,
            hovermode='x unified',
            title_text="–ê–Ω–∞–ª–∏–∑ Bitcoin –∏ —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        fig.update_xaxes(showgrid=True, row=1, col=1)
        fig.update_xaxes(showgrid=True, title_text="–î–∞—Ç–∞", row=2, col=1)
        fig.update_yaxes(showgrid=True, title_text="–¶–µ–Ω–∞ (USD)", row=1, col=1)
        fig.update_yaxes(showgrid=True, title_text="–ü—Ä–æ—Ü–µ–Ω—Ç (%)", range=[0, 100], row=2, col=1)
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if 'BTC' in historical_data:
            st.markdown("### üîÑ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            
            btc_data = historical_data['BTC'].copy()
            btc_data['date'] = pd.to_datetime(btc_data['date'])
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–º—É –∂–µ –ø–µ—Ä–∏–æ–¥—É
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=history_days)
            btc_data = btc_data[(btc_data['date'].dt.date >= start_date) & (btc_data['date'].dt.date <= end_date)]
            
            if not btc_data.empty:
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                merged_data = pd.merge(
                    indicator_data[['date', 'percentage']], 
                    btc_data[['date', 'price']], 
                    on='date', 
                    how='inner'
                )
                
                if len(merged_data) > 10:
                    correlation = merged_data['percentage'].corr(merged_data['price'])
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å Bitcoin", f"{correlation:.3f}")
                    with col2:
                        if abs(correlation) > 0.7:
                            corr_strength = "–°–∏–ª—å–Ω–∞—è"
                        elif abs(correlation) > 0.3:
                            corr_strength = "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
                        else:
                            corr_strength = "–°–ª–∞–±–∞—è"
                        
                        st.metric("üîç –°–∏–ª–∞ —Å–≤—è–∑–∏", corr_strength)
                    
                    st.markdown(f"""
                    **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:**
                    - **–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è**: {correlation:.3f} (—á–µ–º –±–ª–∏–∂–µ –∫ ¬±1, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Å–≤—è–∑—å)
                    - **–°–∏–ª–∞ —Å–≤—è–∑–∏**: {corr_strength.lower()} –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                    - **–î–∞–Ω–Ω—ã–µ**: {len(merged_data)} —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –¥–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    """)
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö Bitcoin –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        else:
            st.warning("–î–∞–Ω–Ω—ã–µ Bitcoin –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:**")
            st.text(f"‚Ä¢ –¢–æ–ø –º–æ–Ω–µ—Ç: {params.get('top_n', top_n)}")
            st.text(f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ MA: {params.get('ma_period', ma_period)} –¥–Ω–µ–π")
            st.text(f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {params.get('history_days', history_days)} –¥–Ω–µ–π")
            st.text(f"‚Ä¢ –ú–æ–Ω–µ—Ç —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(historical_data)}")
        
        with col2:
            st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π:**")
            above_80 = (indicator_data['percentage'] >= 80).sum()
            below_20 = (indicator_data['percentage'] <= 20).sum()
            neutral = len(indicator_data) - above_80 - below_20
            
            st.text(f"‚Ä¢ –î–Ω–µ–π –≤ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (‚â•80%): {above_80}")
            st.text(f"‚Ä¢ –î–Ω–µ–π –≤ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (‚â§20%): {below_20}")
            st.text(f"‚Ä¢ –î–Ω–µ–π –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ: {neutral}")
            st.text(f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {indicator_data['percentage'].std():.1f}%")
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.markdown("### üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # CSV —ç–∫—Å–ø–æ—Ä—Ç
            csv_data = indicator_data.to_csv(index=False)
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å CSV",
                data=csv_data,
                file_name=f"market_breadth_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # PNG —ç–∫—Å–ø–æ—Ä—Ç
            if st.button("üñºÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ PNG"):
                fig.write_image("market_breadth_chart.png", width=1200, height=600)
                st.success("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ market_breadth_chart.png")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π")
        recent_data = indicator_data.tail(10).copy()
        recent_data['date'] = recent_data['date'].dt.strftime('%Y-%m-%d')
        recent_data['percentage'] = recent_data['percentage'].round(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
        if len(recent_data.columns) == 4:
            recent_data.columns = ['–î–∞—Ç–∞', '–ü—Ä–æ—Ü–µ–Ω—Ç (%)', '–ú–æ–Ω–µ—Ç –≤—ã—à–µ MA', '–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç']
        else:
            recent_data.columns = ['–î–∞—Ç–∞', '–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 (%)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200']
        
        st.dataframe(
            recent_data.iloc[::-1],  # Reverse to show newest first
            use_container_width=True,
            hide_index=True
        )

else:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    st.markdown("""
    ## üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞!
    
    –≠—Ç–æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–ø-50 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –≤—ã—à–µ —Å–≤–æ–µ–π 200-–¥–Ω–µ–≤–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (MA200).
    
    ### üìà –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:
    - **‚â•80%** - –†—ã–Ω–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω (—Å–∏–≥–Ω–∞–ª –∫ –ø—Ä–æ–¥–∞–∂–µ)
    - **‚â§10%** - –†—ã–Ω–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (—Å–∏–≥–Ω–∞–ª –∫ –ø–æ–∫—É–ø–∫–µ)
    - **10-80%** - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
    
    ### üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    2. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
    3. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ
    
    ### ‚öôÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å Plotly
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
    - –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –∏ PNG
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    
    **–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑" –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!**
    """)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API
    st.markdown("""
    ---
    **üì° –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** CryptoCompare API (–ø—É–±–ª–∏—á–Ω—ã–π, –±–µ–∑ –∫–ª—é—á–∞)
    
    **‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** 1-3 –º–∏–Ω—É—Ç—ã (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    
    **üíæ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ:** –î–∞–Ω–Ω—ã–µ –∫–µ—à–∏—Ä—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
    """)
