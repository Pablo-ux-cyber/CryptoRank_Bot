Цели
Получить список топ-50 криптовалют по капитализации (данные с CoinGecko).
Для каждой монеты получить исторические цены закрытия (close) не менее чем за 400 дней (рекомендуется с запасом).
Для каждого дня за последние 365 дней рассчитать, сколько монет торгуются выше своей MA200.
Для каждого дня вычислить процент монет из топ-50, находящихся выше MA200.
Построить график динамики этого показателя.
На графике добавить горизонтальные линии на уровнях 80% (перекупленность) и 10% (перепроданность).
Сохранить итоговый график в формате PNG.
Сохранить таблицу с данными в CSV.
Функциональные требования
Загрузка топ-50 монет:
Получать список топ-50 криптовалют по капитализации через CoinGecko API (coins/markets).
Загрузка исторических цен:
Для каждой монеты получать дневные исторические цены (endpoint: coins/{id}/market_chart), минимум за (200+365=565) дней.
Если исторических данных меньше требуемого количества — исключать монету из анализа.
Расчёт MA200 и процента:
Для каждого дня за последние 365 дней:
Для каждой монеты: рассчитать MA200 за предыдущие 200 дней (скользящая средняя по close).
Сравнить цену закрытия в этот день с её MA200.
Для каждого дня:
% монет выше MA200 = (количество монет выше MA200 / общее количество монет с достаточной историей) * 100
Визуализация:
Построить график “% монет из топ-50 выше MA200” за последние 365 дней.
Добавить горизонтальные линии на уровнях 80% и 10% (разными цветами, например, красная и зелёная пунктирные).
Подписать оси, заголовок, легенду.
Сделать сетку.
Сохранение результатов:
График сохранить в PNG (например, top50_ma200.png).
Результирующую таблицу сохранить в CSV (top50_ma200_data.csv).
Технические детали
Язык: Python 3.x
Библиотеки: requests, pandas, matplotlib, tqdm
API: CoinGecko (публичный, без авторизации)
Ограничения CoinGecko: не чаще 1 запроса в 1.3 сек., обрабатывать возможные ошибки и временные блокировки.
Код должен быть оформлен как один скрипт, запуск — одной командой.
Дополнительно (по желанию, уточнять):
Кешировать исторические данные монет для ускорения последующих запусков.
Сделать параметры (кол-во монет, окно MA, длительность истории) конфигурируемыми через переменные или аргументы.
Реализовать отправку графика в Telegram-бот или email (по отдельному ТЗ).
Пример итоговой визуализации:
Основная синяя линия — динамика процента монет выше MA200 по дням.
Красная пунктирная — 80% (overbought/перекупленность).
Зелёная пунктирная — 10% (oversold/перепроданность).
Подписи, сетка, сохранение графика.
Ожидаемый результат
Python-скрипт (ma200_indicator.py), работающий “из коробки”.
Файл с графиком (top50_ma200.png).
CSV-файл с историей процента монет выше MA200 (top50_ma200_data.csv).
