import os
import threading
import time
from datetime import datetime, timedelta

from logger import logger
from scraper import SensorTowerScraper
from telegram_bot import TelegramBot
from fear_greed_index import FearGreedIndexTracker
from google_trends import GoogleTrendsTracker

class SensorTowerScheduler:
    def __init__(self):
        # Instead of using APScheduler, create a simple threading-based scheduler
        self.running = False
        self.thread = None
        self.stop_event = threading.Event()
        self.scraper = SensorTowerScraper()
        self.telegram_bot = TelegramBot()
        self.fear_greed_tracker = FearGreedIndexTracker()
        self.google_trends_tracker = GoogleTrendsTracker()
        self.rank_history_file = "/tmp/coinbasebot_rank_history.txt"
        self.last_google_trends_check = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Trends
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞
        try:
            if os.path.exists(self.rank_history_file):
                with open(self.rank_history_file, "r") as f:
                    saved_rank = f.read().strip()
                    if saved_rank and saved_rank.isdigit():
                        self.last_sent_rank = int(saved_rank)
                        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ñ–∞–π–ª–∞: {self.last_sent_rank}")
                    else:
                        self.last_sent_rank = None
            else:
                self.last_sent_rank = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}")
            self.last_sent_rank = None
            
        self.lockfile = None  # –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤)
    
    def _scheduler_loop(self):
        """
        The main scheduler loop that runs in a background thread.
        Sleeps for 5 minutes between executions.
        """
        google_trends_interval = 24 * 60 * 60  # –û—Ç–ø—Ä–∞–≤–∫–∞ Google Trends –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        
        while not self.stop_event.is_set():
            try:
                # Run the job
                self.run_scraping_job()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ Google Trends
                current_time = datetime.now()
                if self.last_google_trends_check is None or (current_time - self.last_google_trends_check).total_seconds() >= google_trends_interval:
                    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö Google Trends (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
                    self.send_google_trends_message()
            except Exception as e:
                logger.error(f"Error in scheduler loop: {str(e)}")
            
            # Sleep for 5 minutes
            seconds_to_sleep = 5 * 60  # 5 minutes in seconds
            logger.info(f"Scheduler sleeping for {seconds_to_sleep} seconds (5 minutes)")
            
            # Wait with checking for stop event
            for _ in range(seconds_to_sleep):
                if self.stop_event.is_set():
                    break
                time.sleep(1)
    
    def start(self):
        """Start the scheduler"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            import fcntl
            import os
            
            self.lockfile = open("/tmp/coinbasebot.lock", "w")
            try:
                fcntl.lockf(self.lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
                logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞. –≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –±—É–¥–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º.")
            except IOError:
                logger.error("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                return False
                
            if self.running:
                logger.warning("Scheduler is already running")
                return True
                
            self.running = True
            self.stop_event.clear()
            self.thread = threading.Thread(target=self._scheduler_loop)
            self.thread.daemon = True
            self.thread.start()
            
            next_run = datetime.now() + timedelta(minutes=5)
            logger.info(f"Scheduler started. Next run at: {next_run}")
            
            # Uncomment to run immediately for testing
            # self.run_scraping_job()
            
            return True
        except Exception as e:
            logger.error(f"Failed to start scheduler: {str(e)}")
            return False
    
    def stop(self):
        """Stop the scheduler"""
        if self.running:
            self.running = False
            self.stop_event.set()
            if self.thread:
                self.thread.join(timeout=1)
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if hasattr(self, 'lockfile'):
                import fcntl
                try:
                    fcntl.lockf(self.lockfile, fcntl.LOCK_UN)
                    self.lockfile.close()
                    logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            logger.info("Scheduler stopped")
    
    def _send_combined_message(self, rankings_data, fear_greed_data=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –∏–Ω–¥–µ–∫—Å–µ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
        
        Args:
            rankings_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            fear_greed_data (dict, optional): –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.telegram_bot.test_connection():
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return False
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            if not rankings_data or "categories" not in rankings_data or not rankings_data["categories"]:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–µ")
                return False
                
            rank = rankings_data["categories"][0]["rank"]
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            trend_icon = ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–¥–µ
            if "trend" in rankings_data:
                trend_direction = rankings_data["trend"]["direction"]
                if trend_direction == "up":
                    # –õ—É—á—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ, –∑–µ–ª–µ–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                    trend_icon = "üîº "
                elif trend_direction == "down":
                    # –•—É–¥—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, –∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                    trend_icon = "üîΩ "
            
            combined_message = f"{trend_icon}Coinbase Appstore Rank: {rank}\n\n"
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if fear_greed_data:
                value = fear_greed_data.get("value", "N/A")
                label = fear_greed_data.get("classification", "Unknown")
                
                # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                filled_char = "‚ö™" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if label == "Extreme Fear":
                    emoji = "üò±"
                    filled_char = "üî¥"
                elif label == "Fear":
                    emoji = "üò®"
                    filled_char = "üü†"
                elif label == "Neutral":
                    emoji = "üòê"
                    filled_char = "üü°"
                elif label == "Greed":
                    emoji = "üòè"
                    filled_char = "üü¢"
                elif label == "Extreme Greed":
                    emoji = "ü§ë"
                    filled_char = "üü¢"
                else:
                    emoji = "‚ùì"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
                combined_message += f"{emoji} {label}: {value}/100\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress_bar = self.fear_greed_tracker._generate_progress_bar(int(value), 100, 10, filled_char)
                combined_message += f"{progress_bar}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not self.telegram_bot.send_message(combined_message):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.")
                return False
            
            logger.info("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            logger.error(error_message)
            try:
                self.telegram_bot.send_message(error_message)
            except:
                pass
            return False
    
    def run_scraping_job(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Å–∫—Ä–∞–ø–∏–Ω–≥—É: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ SensorTower –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram
        —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        """
        logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤ {datetime.now()}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
            if not self.telegram_bot.test_connection():
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram. –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
            rankings_data = self.scraper.scrape_category_rankings()
            
            if not rankings_data:
                error_message = "‚ùå Failed to scrape SensorTower data."
                logger.error(error_message)
                self.telegram_bot.send_message(error_message)
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥–µ
            if not rankings_data.get("categories") or not rankings_data["categories"]:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            current_rank = int(rankings_data["categories"][0]["rank"])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            fear_greed_data = None
            try:
                fear_greed_data = self.fear_greed_tracker.get_fear_greed_index()
                if fear_greed_data:
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Fear & Greed Index: {fear_greed_data['value']} ({fear_greed_data['classification']})")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Fear & Greed Index")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Fear & Greed Index: {str(e)}")
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            if self.last_sent_rank is None:
                logger.info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {current_rank}")
                need_to_send = True
                # –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º
            elif current_rank != self.last_sent_rank:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {current_rank} (–ø—Ä–µ–¥—ã–¥—É—â–∏–π: {self.last_sent_rank})")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, —É–ª—É—á—à–µ–Ω–∏–µ –∏–ª–∏ —É—Ö—É–¥—à–µ–Ω–∏–µ
                if current_rank < self.last_sent_rank:
                    logger.info(f"–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {self.last_sent_rank} ‚Üí {current_rank}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–µ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –≤–≤–µ—Ä—Ö
                    rankings_data["trend"] = {"direction": "up", "previous": self.last_sent_rank}
                else:
                    logger.info(f"–£—Ö—É–¥—à–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {self.last_sent_rank} ‚Üí {current_rank}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–µ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –≤–Ω–∏–∑
                    rankings_data["trend"] = {"direction": "down", "previous": self.last_sent_rank}
                need_to_send = True
            else:
                logger.info(f"–†–µ–π—Ç–∏–Ω–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ({current_rank} = {self.last_sent_rank}). –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                need_to_send = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if need_to_send:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
                result = self._send_combined_message(rankings_data, fear_greed_data)
                
                if result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    previous_rank = self.last_sent_rank
                    self.last_sent_rank = current_rank
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {previous_rank} ‚Üí {self.last_sent_rank}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                    try:
                        with open(self.rank_history_file, "w") as f:
                            f.write(str(current_rank))
                        logger.info(f"–†–µ–π—Ç–∏–Ω–≥ {current_rank} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {self.rank_history_file}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª: {str(e)}")
                return result
            else:
                return True  # –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
                
        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {str(e)}"
            logger.error(error_message)
            try:
                self.telegram_bot.send_message(error_message)
            except:
                pass
            return False
            
    def get_current_fear_greed_index(self):
        """
        Get current Fear & Greed Index data for testing/manual triggering
        
        Returns:
            dict: Fear & Greed Index data or None in case of error
        """
        try:
            return self.fear_greed_tracker.get_fear_greed_index()
        except Exception as e:
            logger.error(f"Error getting Fear & Greed Index: {str(e)}")
            return None
    
    def get_google_trends_data(self, terms=None, timeframe=None, geo=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Google Trends –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        
        Args:
            terms (list, optional): –°–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            timeframe (str, optional): –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Google Trends
            geo (str, optional): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ '' –¥–ª—è –≤—Å–µ–≥–æ –º–∏—Ä–∞
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            return self.google_trends_tracker.get_interest_over_time(terms, timeframe, geo)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Google Trends: {str(e)}")
            return None
        
    def send_google_trends_message(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ Google Trends –≤ Telegram
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.telegram_bot.test_connection():
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram. –°–æ–æ–±—â–µ–Ω–∏–µ Google Trends –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤
            trends_data = self.get_google_trends_data()
            
            if not trends_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Google Trends.")
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.google_trends_tracker.format_trends_message(trends_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not self.telegram_bot.send_message(message):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ Google Trends –≤ Telegram.")
                return False
            
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ Google Trends —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            self.last_google_trends_check = datetime.now()
            return True
            
        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è Google Trends: {str(e)}"
            logger.error(error_message)
            try:
                self.telegram_bot.send_message(error_message)
            except:
                pass
            return False
            
    def run_now(self, force_send=False):
        """
        Manually trigger a scraping job immediately
        
        Args:
            force_send (bool): If True, send message even if rank hasn't changed
            
        Returns:
            bool: True if job ran successfully, False otherwise
        """
        logger.info("Manual scraping job triggered")
        
        if force_send:
            # Temporarily save the old value
            old_last_sent_rank = self.last_sent_rank
            # Reset to force sending
            self.last_sent_rank = None
            
            result = self.run_scraping_job()
            
            # If job failed, restore the old value
            if not result:
                self.last_sent_rank = old_last_sent_rank
                
            return result
        else:
            # Regular run with change detection
            return self.run_scraping_job()
