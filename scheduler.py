import threading
import time
from datetime import datetime, timedelta

from logger import logger
from scraper import SensorTowerScraper
from telegram_bot import TelegramBot
from fear_greed_index import FearGreedIndexTracker

class SensorTowerScheduler:
    def __init__(self):
        # Instead of using APScheduler, create a simple threading-based scheduler
        self.running = False
        self.thread = None
        self.scraper = SensorTowerScraper()
        self.telegram_bot = TelegramBot()
        self.fear_greed_tracker = FearGreedIndexTracker()
    
    def _scheduler_loop(self):
        """
        The main scheduler loop that runs in a background thread.
        Sleeps for 24 hours between executions.
        """
        while self.running:
            # Sleep for 24 hours (in seconds)
            time.sleep(86400)
            if self.running:  # Check if still running after sleep
                self.run_scraping_job()
    
    def start(self):
        """Start the scheduler"""
        try:
            if self.running:
                logger.warning("Scheduler is already running")
                return True
                
            self.running = True
            self.thread = threading.Thread(target=self._scheduler_loop)
            self.thread.daemon = True
            self.thread.start()
            
            next_run = datetime.now() + timedelta(hours=24)
            logger.info(f"Scheduler started. Next run at: {next_run}")
            
            # Uncomment to run immediately for testing
            # self.run_scraping_job()
            
            return True
        except Exception as e:
            logger.error(f"Failed to start scheduler: {str(e)}")
            return False
    
    def stop(self):
        """Stop the scheduler"""
        if self.running:
            self.running = False
            if self.thread:
                self.thread.join(timeout=1)
            logger.info("Scheduler stopped")
    
    def run_scraping_job(self):
        """
        Run the scraping job: scrape SensorTower data and post to Telegram
        """
        logger.info(f"Running scheduled scraping job at {datetime.now()}")
        
        try:
            # Test Telegram connection first
            if not self.telegram_bot.test_connection():
                logger.error("Telegram connection test failed. Job aborted.")
                return False
            
            # –ß–∞—Å—Ç—å 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            rankings_data = self.scraper.scrape_category_rankings()
            
            if not rankings_data:
                error_message = "‚ùå Failed to scrape SensorTower data."
                logger.error(error_message)
                self.telegram_bot.send_message(error_message)
                return False
            
            # –ß–∞—Å—Ç—å 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            fear_greed_data = None
            try:
                fear_greed_data = self.fear_greed_tracker.get_fear_greed_index()
                
                if not fear_greed_data:
                    logger.error("Failed to get Fear & Greed Index data")
            except Exception as e:
                logger.error(f"Error processing Fear & Greed Index: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            
            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π –æ–±—â–µ–π –¥–∞—Ç–æ–π –∏ —Å–∫—Ä—ã–≤–∞–µ–º—ã–º–∏ –±–ª–æ–∫–∞–º–∏
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            current_date = rankings_data.get("date", time.strftime("%Y-%m-%d"))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            combined_message = f"üìä *Crypto Market Report*\n"
            combined_message += f"üìÖ *–î–∞—Ç–∞:* {current_date}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ Coinbase (–±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã)
            app_name = rankings_data.get("app_name", "Coinbase").replace("-", "\\-").replace(".", "\\.").replace("!", "\\!")
            
            # –°—Ç–∞—Ç—É—Å –∏ –≤–∏–¥–∏–º–∞—è —á–∞—Å—Ç—å
            if rankings_data.get("categories") and len(rankings_data["categories"]) > 0:
                category = rankings_data["categories"][0]
                rank = category.get("rank", "N/A")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
                if int(rank) <= 10:
                    rank_icon = "ü•á"  # –ó–æ–ª–æ—Ç–æ –¥–ª—è —Ç–æ–ø-10
                elif int(rank) <= 50:
                    rank_icon = "ü•à"  # –°–µ—Ä–µ–±—Ä–æ –¥–ª—è —Ç–æ–ø-50
                elif int(rank) <= 100:
                    rank_icon = "ü•â"  # –ë—Ä–æ–Ω–∑–∞ –¥–ª—è —Ç–æ–ø-100
                elif int(rank) <= 200:
                    rank_icon = "üìä"  # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è —Ç–æ–ø-200
                else:
                    rank_icon = "üìâ"  # –ì—Ä–∞—Ñ–∏–∫–∏ –≤–Ω–∏–∑ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∏–∂–µ 200
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞)
                combined_message += f"{rank_icon} *{app_name}*: \\#{rank}\n"
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–∫—Ä—ã—Ç–∞ –≤ —Å–ø–æ–π–ª–µ—Ä–µ)
                details = f"*{app_name} –†–µ–π—Ç–∏–Ω–≥ –≤ App Store*\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–µ—Ç–∞–ª–∏
                for category in rankings_data["categories"]:
                    cat_name = category.get("category", "Unknown Category")
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    cat_name = cat_name.replace("-", "\\-").replace(".", "\\.").replace("!", "\\!")
                    rank = category.get("rank", "N/A")
                    
                    details += f"‚Ä¢ {cat_name}: \\#{rank}\n"
                
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ —Å–ø–æ–π–ª–µ—Ä
                # –°–∏–º–≤–æ–ª—ã —Å–ø–æ–π–ª–µ—Ä–∞ –¥–ª—è MarkdownV2 - || –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
                combined_message += f"||{details}||\n"
            else:
                combined_message += f"‚ùå *{app_name}*: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\\.\n"
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω–¥–µ–∫—Å–µ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if fear_greed_data:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                combined_message += "\n" + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ" + "\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã
                value = fear_greed_data.get("value", "N/A")
                label = fear_greed_data.get("value_classification", "Unknown")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ FGI (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞)
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–µ—Ñ–∏—Å –≤ —Å—Ç—Ä–æ–∫–µ
                label = label.replace("-", "\\-")
                combined_message += f"üß† *–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏*: {value} \\- {label}\n"
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–∫—Ä—ã—Ç–∞ –≤ —Å–ø–æ–π–ª–µ—Ä–µ)
                details = ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –¥–µ—Ç–∞–ª–∏
                if "value" in fear_greed_data:
                    progress_bar = self.fear_greed_tracker._generate_progress_bar(int(value), 100, 10)
                    details += f"{progress_bar}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–µ–∫—Å–∞
                details += "–ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞:\\n"
                details += "0\\-25: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö\\n"
                details += "26\\-45: –°—Ç—Ä–∞—Ö\\n"
                details += "46\\-55: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\\n"
                details += "56\\-75: –ñ–∞–¥–Ω–æ—Å—Ç—å\\n"
                details += "76\\-100: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å"
                
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ —Å–ø–æ–π–ª–µ—Ä
                combined_message += f"||{details}||"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not self.telegram_bot.send_message(combined_message):
                logger.error("Failed to send combined message to Telegram.")
                return False
            
            logger.info("Combined message sent successfully")
            logger.info("Scraping job completed successfully")
            return True
            
        except Exception as e:
            error_message = f"‚ùå An error occurred during the scraping job: {str(e)}"
            logger.error(error_message)
            try:
                self.telegram_bot.send_message(error_message)
            except:
                pass
            return False
            
    def get_current_fear_greed_index(self):
        """
        Get current Fear & Greed Index data for testing/manual triggering
        
        Returns:
            dict: Fear & Greed Index data or None in case of error
        """
        try:
            return self.fear_greed_tracker.get_fear_greed_index()
        except Exception as e:
            logger.error(f"Error getting Fear & Greed Index: {str(e)}")
            return None
