import time
import json
import random
import requests
import pandas as pd
from datetime import datetime, timedelta
from pytrends.request import TrendReq
import logging
from logger import logger

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Google Trends –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
trends_logger = logging.getLogger('google_trends')
trends_logger.setLevel(logging.DEBUG)

# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
if trends_logger.handlers:
    trends_logger.handlers.clear()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–∞–∂–¥—É—é –ø–æ–ª–Ω–æ—á—å, —Ö—Ä–∞–Ω—è—â–∏–π –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
from logging.handlers import TimedRotatingFileHandler
trends_file_handler = TimedRotatingFileHandler(
    'google_trends_debug.log',
    when='midnight',      # –†–æ—Ç–∞—Ü–∏—è –≤ –ø–æ–ª–Ω–æ—á—å
    interval=1,           # –û–¥–∏–Ω –¥–µ–Ω—å –Ω–∞ —Ñ–∞–π–ª
    backupCount=7,        # –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –∑–∞ 7 –¥–Ω–µ–π
    encoding='utf-8'
)
trends_file_handler.setLevel(logging.DEBUG)
trends_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
trends_file_handler.setFormatter(trends_formatter)
trends_logger.addHandler(trends_file_handler)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
trends_stream_handler = logging.StreamHandler()
trends_stream_handler.setLevel(logging.INFO)
trends_stream_handler.setFormatter(trends_formatter)
trends_logger.addHandler(trends_stream_handler)

class GoogleTrendsPulse:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Google Trends
        
        –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π,
        —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π Fear & Greed Index:
        - üî¥ –ö—Ä–∞—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–∞—Ö –∏ –Ω–∏–∑–∫–∏–π FOMO - –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
        - üü° –ñ—ë–ª—Ç—ã–π —Å–∏–≥–Ω–∞–ª: —Ä–∞—Å—Ç—É—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º - —Ä—ã–Ω–æ–∫ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ—Ç—Å—è
        - ‚ö™ –ë–µ–ª—ã–π —Å–∏–≥–Ω–∞–ª: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –±–µ–∑ —Å–∏–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–∫–æ—Å–æ–≤
        - üü¢ –ó–µ–ª—ë–Ω—ã–π —Å–∏–≥–Ω–∞–ª: –≤—ã—Å–æ–∫–∏–π FOMO-—Ñ–∞–∫—Ç–æ—Ä - –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–∏–∫ —Ä—ã–Ω–∫–∞
        - üîµ –°–∏–Ω–∏–π —Å–∏–≥–Ω–∞–ª: —Ä—ã–Ω–æ–∫ –≤ —Å–ø—è—á–∫–µ - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        """
        # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.last_check_time = None
        self.last_data = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pytrends API —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º –∏ –º–æ—Å–∫–æ–≤—Å–∫–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º retries –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
        self.pytrends = TrendReq(hl='en-US', tz=180)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.fomo_keywords = ["bitcoin price", "crypto millionaire", "buy bitcoin now"]
        self.fear_keywords = ["crypto crash", "bitcoin scam", "crypto tax"]
        self.general_keywords = ["bitcoin", "cryptocurrency", "blockchain"]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        self.timeframe = "now 7-d"
        
        # –ü–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
        self.timeframes = {
            "current": "now 7-d",      # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
            "previous": "now 14-d",    # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        }
        
        # –ó–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
        self.min_delay = 3  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.max_delay = 10  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.market_signals = [
            {"signal": "üî¥", "description": "High fear and low FOMO - possible buying opportunity", "weight": 1},
            {"signal": "üü†", "description": "Decreasing interest in cryptocurrencies - market cooling down", "weight": 1}, 
            {"signal": "‚ö™", "description": "Neutral interest in cryptocurrencies", "weight": 2},
            {"signal": "üü°", "description": "Growing interest in cryptocurrencies - market warming up", "weight": 1},
            {"signal": "üü¢", "description": "High FOMO factor - possible market peak", "weight": 1}
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            with open("trends_history.json", "r") as f:
                self.history_data = json.load(f)
                logger.info(f"Loaded Google Trends history: {len(self.history_data)} records")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if self.history_data:
                    most_recent = max(self.history_data, key=lambda x: x.get("timestamp", ""))
                    self.last_data = {
                        "signal": most_recent.get("signal", "‚ö™"),
                        "description": most_recent.get("description", "Neutral interest in cryptocurrencies"),
                        "fomo_score": most_recent.get("fomo_score", 50),
                        "fear_score": most_recent.get("fear_score", 50),
                        "general_score": most_recent.get("general_score", 50),
                        "fomo_to_fear_ratio": most_recent.get("fomo_to_fear_ratio", 1.0),
                        "timestamp": most_recent.get("timestamp", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                    }
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ timestamp
                    try:
                        self.last_check_time = datetime.strptime(
                            self.last_data["timestamp"], 
                            "%Y-%m-%d %H:%M:%S"
                        )
                        logger.info(f"Last Google Trends check time: {self.last_check_time}")
                    except:
                        self.last_check_time = datetime.now() - timedelta(days=1)
                        logger.warning("Could not parse last check time, using yesterday")
                    
                    logger.info(f"Using most recent Google Trends data from history: {self.last_data['signal']} - {self.last_data['description']}")
        except (FileNotFoundError, json.JSONDecodeError):
            logger.info("No Google Trends history found or invalid format, will create new")
            self.history_data = []
    
    def _get_term_interest_with_pytrends(self, term, timeframe):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–µ—Ä–º–∏–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pytrends
        
        Args:
            term (str): –¢–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Google Trends
            timeframe (str): –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (now 7-d, now 1-d –∏ —Ç.–¥.)
            
        Returns:
            float: –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–µ—Ä–º–∏–Ω—É (0-100)
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞: {term}, –ø–µ—Ä–∏–æ–¥: {timeframe}")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google Trends
            self.pytrends.build_payload([term], cat=0, timeframe=timeframe)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            interest_data = self.pytrends.interest_over_time()
            
            if interest_data.empty:
                logger.error(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Google Trends –¥–ª—è '{term}'")
                return 50  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            avg_interest = interest_data[term].mean()
            logger.info(f"–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è '{term}': {avg_interest}")
            
            return avg_interest
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ pytrends –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞ '{term}': {str(e)}")
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return 50  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def refresh_trends_data(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –¥–∞–Ω–Ω—ã—Ö Google Trends
        
        Returns:
            dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Google Trends Pulse —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.last_check_time = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        trends_data = self.get_trends_data()
        
        return trends_data
    
    def get_fallback_data_from_web(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Google Trends
        –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏
        
        Returns:
            tuple: (fomo_score, fear_score, general_score)
        """
        try:
            # –ú–∞—Ä–∫–µ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            markers = {
                "fomo": ["bitcoin price", "crypto millionaire", "buy bitcoin now"],
                "fear": ["crypto crash", "bitcoin scam", "crypto tax"],
                "general": ["bitcoin", "cryptocurrency", "blockchain"]
            }
            
            # URL –¥–ª—è Google Trends —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            base_url = "https://trends.google.com/trends/explore"

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            session = requests.Session()
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Referer': 'https://trends.google.com/'
            })
            
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –∏ –±–æ–ª—å—à–µ–π –ø–∞—É–∑–æ–π
            import random
            
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            fomo_term = random.choice(markers['fomo'])
            fear_term = random.choice(markers['fear'])
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–ª—è FOMO —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º (14 –¥–Ω–µ–π)
            fomo_html = session.get(f"{base_url}?q={fomo_term}&date=now+14-d")
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FOMO ({fomo_term}): —Å—Ç–∞—Ç—É—Å {fomo_html.status_code}")
            
            # –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (5-10 —Å–µ–∫—É–Ω–¥)
            delay = random.uniform(5.0, 10.0)
            logger.debug(f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {delay:.2f} —Å–µ–∫—É–Ω–¥")
            time.sleep(delay)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–ª—è Fear —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º (14 –¥–Ω–µ–π)
            fear_html = session.get(f"{base_url}?q={fear_term}&date=now+14-d")
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Fear ({fear_term}): —Å—Ç–∞—Ç—É—Å {fear_html.status_code}")
            time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            general_html = session.get(f"{base_url}?q={markers['general'][0]}&date=now+14-d")
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è General: —Å—Ç–∞—Ç—É—Å {general_html.status_code}")
            
            # –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            # –≠—Ç–æ –æ—Ü–µ–Ω–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –æ–±—â–µ–º —Ä–∞–∑–º–µ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            fomo_score = 65 if fomo_html.status_code == 200 else 50
            fear_score = 45 if fear_html.status_code == 200 else 50
            general_score = 70 if general_html.status_code == 200 else 50
            
            # –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
            # –≠—Ç–æ –¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            
            # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ "price prediction" –∏–ª–∏ "going up", 
            # —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Ä–æ—Å—Ç–∞ FOMO
            if fomo_html.status_code == 200 and "price prediction" in fomo_html.text.lower():
                fomo_score += 10
            
            # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ fear –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ "crash" –∏–ª–∏ "scam",
            # —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –≤—ã—Å–æ–∫–æ–≥–æ —Å—Ç—Ä–∞—Ö–∞
            if fear_html.status_code == 200 and "crash" in fear_html.text.lower():
                fear_score += 15
                
            # –ï—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –≤—ã—Å–æ–∫–æ–≥–æ –æ–±—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if general_html.status_code == 200 and len(general_html.text) > 150000:
                general_score += 10
                
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ Google Trends: FOMO={fomo_score}, Fear={fear_score}, General={general_score}")
            return (fomo_score, fear_score, general_score)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ fallback –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return (50, 50, 50)  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def get_trends_data(self, force_refresh=False):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Trends API –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        
        Args:
            force_refresh (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–µ—à
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = datetime.now()
            
            trends_logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö Google Trends. –í—Ä–µ–º—è: {current_time}, –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.last_check_time}")
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–Ω–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ (–º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤)
            # –∏ –º—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            cache_valid = (
                self.last_check_time and 
                (current_time - self.last_check_time).total_seconds() < 24 * 3600 and 
                self.last_data and
                not force_refresh
            )
            
            if cache_valid:
                trends_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Trends (–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)")
                return self.last_data
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Trends API
            trends_logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Trends API...")
            
            try:
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å–º–æ—Ç—Ä–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
                trends_logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TrendReq")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
                pytrends = TrendReq(hl='en-US', tz=0, timeout=(10,25))
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Ä–º–∏–Ω –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (14 –¥–Ω–µ–π)
                trends_logger.info("–ó–∞–ø—Ä–æ—Å –∫ Google Trends API –¥–ª—è 'bitcoin'")
                pytrends.build_payload(['bitcoin'], cat=0, timeframe='now 14-d')
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                trends_logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö interest_over_time")
                trends_data_frame = pytrends.interest_over_time()
                
                # –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è 'crypto crash' –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
                time.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                trends_logger.info("–ó–∞–ø—Ä–æ—Å –∫ Google Trends API –¥–ª—è 'crypto crash'")
                fear_data_frame = None
                try:
                    pytrends.build_payload(['crypto crash'], cat=0, timeframe='now 14-d')
                    fear_data_frame = pytrends.interest_over_time()
                    trends_logger.debug("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è 'crypto crash'")
                except Exception as e:
                    trends_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è 'crypto crash': {str(e)}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è 'bitcoin'
                trends_logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {not trends_data_frame.empty}, —Ä–∞–∑–º–µ—Ä: {len(trends_data_frame) if not trends_data_frame.empty else 0}")
                
                if trends_data_frame.empty:
                    trends_logger.warning("Google Trends –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è bitcoin")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    fomo_score = 50
                    fear_score = 50
                    general_score = 50
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ bitcoin
                    fomo_score = trends_data_frame['bitcoin'].mean()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è crypto crash
                    if fear_data_frame is not None and not fear_data_frame.empty:
                        fear_score = fear_data_frame['crypto crash'].mean()
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è crypto crash, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        fear_score = 50
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ
                    general_score = (fomo_score + fear_score) / 2
                    
                    trends_logger.debug(f"–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
                    trends_logger.debug(f"Bitcoin –¥–∞–Ω–Ω—ã–µ: {len(trends_data_frame)} –∑–∞–ø–∏—Å–µ–π")
                    if fear_data_frame is not None:
                        trends_logger.debug(f"Crypto crash –¥–∞–Ω–Ω—ã–µ: {len(fear_data_frame)} –∑–∞–ø–∏—Å–µ–π")
                    
                    trends_logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Trends:")
                    trends_logger.info(f"FOMO (bitcoin): {fomo_score}")
                    trends_logger.info(f"Fear (crypto crash): {fear_score}")
                    trends_logger.info(f"General interest: {general_score}")
                    
                        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    trends_logger.debug("–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ bitcoin –ø–æ –¥–Ω—è–º:")
                    for date, row in trends_data_frame.iterrows():
                        trends_logger.debug(f"  {date}: bitcoin={row['bitcoin']}")
                    
                    if fear_data_frame is not None and not fear_data_frame.empty:
                        trends_logger.debug("–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ crypto crash –ø–æ –¥–Ω—è–º:")
                        for date, row in fear_data_frame.iterrows():
                            trends_logger.debug(f"  {date}: crypto crash={row['crypto crash']}")
                
            except Exception as e:
                trends_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Trends API: {str(e)}")
                import traceback
                trends_logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤,
                # –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
                is_rate_limit = "429" in str(e) or "TooManyRequestsError" in str(e)
                if is_rate_limit:
                    trends_logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (429). –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        fomo_score, fear_score, general_score = self.get_fallback_data_from_web()
                        trends_logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: FOMO={fomo_score}, Fear={fear_score}")
                    except Exception as fallback_e:
                        trends_logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ: {str(fallback_e)}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        fomo_score = 50
                        fear_score = 50
                        general_score = 50
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ª–∏–º–∏—Ç–∞–º–∏) –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    trends_logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                    fomo_score = 50
                    fear_score = 50
                    general_score = 50
            
            # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è FOMO –∫ —Å—Ç—Ä–∞—Ö—É
            fomo_to_fear_ratio = fomo_score / max(fear_score, 1)  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            signal, description = self._determine_market_signal(fomo_score, fear_score, general_score, fomo_to_fear_ratio)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            trends_data = {
                "signal": signal,
                "description": description,
                "fomo_score": fomo_score,
                "fear_score": fear_score,
                "general_score": general_score,
                "fomo_to_fear_ratio": fomo_to_fear_ratio,
                "timestamp": current_time.strftime("%Y-%m-%d %H:%M:%S"),
                "real_data": True
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.last_check_time = current_time
            self.last_data = trends_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history_data.append(trends_data)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.history_data) > 100:
                self.history_data = self.history_data[-100:]
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª
            try:
                with open("trends_history.json", "w") as f:
                    json.dump(self.history_data, f, indent=2)
                logger.info(f"Saved Google Trends history: {len(self.history_data)} records")
            except Exception as e:
                logger.error(f"Error saving Google Trends history: {str(e)}")
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Trends: {trends_data['signal']} - {trends_data['description']}")
            return trends_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Google Trends: {str(e)}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if self.last_data:
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Trends –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
                return self.last_data
                
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            neutral_data = {
                "signal": "‚ö™",  # –ë–µ–ª—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                "description": "Neutral interest in cryptocurrencies",
                "fomo_score": 50,
                "fear_score": 50,
                "general_score": 50,
                "fomo_to_fear_ratio": 1.0,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Trends: {neutral_data['signal']} - {neutral_data['description']}")
            return neutral_data
    
    def _determine_market_signal(self, fomo_score, fear_score, general_score, fomo_to_fear_ratio):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        Args:
            fomo_score (float): –û—Ü–µ–Ω–∫–∞ FOMO-–∑–∞–ø—Ä–æ—Å–æ–≤
            fear_score (float): –û—Ü–µ–Ω–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞—Ö–æ–º
            general_score (float): –û—Ü–µ–Ω–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
            fomo_to_fear_ratio (float): –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ FOMO –∫ —Å—Ç—Ä–∞—Ö—É
            
        Returns:
            tuple: (emoji-—Å–∏–≥–Ω–∞–ª, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
        """
        # –ü—Ä–∞–≤–∏–ª–æ 1: –í—ã—Å–æ–∫–∏–π FOMO –∏ –Ω–∏–∑–∫–∏–π —Å—Ç—Ä–∞—Ö = –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–∏–∫ —Ä—ã–Ω–∫–∞
        # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ - –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∏–∫–∞
        if fomo_score > 70 and fomo_to_fear_ratio > 3.0:
            return "üü¢", "High FOMO factor - possible market peak"
            
        # –ü—Ä–∞–≤–∏–ª–æ 2: –†–∞—Å—Ç—É—â–∏–π FOMO, —Å—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–∞—Ö = —Ä–∞–∑–æ–≥—Ä–µ–≤ —Ä—ã–Ω–∫–∞
        elif fomo_score > 60 and fomo_to_fear_ratio > 1.5:
            return "üü°", "Growing interest in cryptocurrencies - market warming up"
            
        # –ü—Ä–∞–≤–∏–ª–æ 3: –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–∞—Ö, –Ω–∏–∑–∫–∏–π FOMO = –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
        # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ - –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        elif fear_score > 70 and fomo_to_fear_ratio < 0.7:
            return "üî¥", "High fear and low FOMO - possible buying opportunity"
            
        # –ü—Ä–∞–≤–∏–ª–æ 4: –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–∞—Ö, —Å–Ω–∏–∂–∞—é—â–∏–π—Å—è FOMO = –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
        elif fear_score > 50 and fomo_to_fear_ratio < 1.0:
            return "üü†", "Decreasing interest in cryptocurrencies - market cooling down"
            
        # –ü—Ä–∞–≤–∏–ª–æ 5: –ù–∏–∑–∫–∏–π –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å = –∑–∞—Ç–∏—à—å–µ –Ω–∞ —Ä—ã–Ω–∫–µ
        elif general_score < 30:
            return "üîµ", "Low interest in cryptocurrencies - market hibernation"
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        else:
            return "‚ö™", "Neutral interest in cryptocurrencies"
    
    def format_trends_message(self, trends_data=None):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            trends_data (dict, optional): –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ None –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not trends_data:
            trends_data = self.get_trends_data()
            
        signal = trends_data["signal"]
        description = trends_data["description"]
            
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        message = f"{signal} Google Trends: {description}"
            
        return message