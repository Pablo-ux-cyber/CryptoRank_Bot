#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import json
import random
import requests
import pandas as pd
from datetime import datetime, timedelta
from pytrends.request import TrendReq
from pytrends.exceptions import TooManyRequestsError
import logging
from logger import logger

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Google Trends –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
trends_logger = logging.getLogger('google_trends')
trends_logger.setLevel(logging.DEBUG)

# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
if trends_logger.handlers:
    trends_logger.handlers.clear()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–∞–∂–¥—É—é –ø–æ–ª–Ω–æ—á—å, —Ö—Ä–∞–Ω—è—â–∏–π –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
from logging.handlers import TimedRotatingFileHandler
trends_file_handler = TimedRotatingFileHandler(
    'google_trends_debug.log',
    when='midnight',      # –†–æ—Ç–∞—Ü–∏—è –≤ –ø–æ–ª–Ω–æ—á—å
    interval=1,           # –û–¥–∏–Ω –¥–µ–Ω—å –Ω–∞ —Ñ–∞–π–ª
    backupCount=7,        # –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ –∑–∞ 7 –¥–Ω–µ–π
    encoding='utf-8'
)
trends_file_handler.setLevel(logging.DEBUG)
trends_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
trends_file_handler.setFormatter(trends_formatter)
trends_logger.addHandler(trends_file_handler)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
trends_stream_handler = logging.StreamHandler()
trends_stream_handler.setLevel(logging.INFO)
trends_stream_handler.setFormatter(trends_formatter)
trends_logger.addHandler(trends_stream_handler)

class GoogleTrendsPulse:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Google Trends
        
        –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π,
        —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π Fear & Greed Index:
        - üî¥ –ö—Ä–∞—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–∞—Ö –∏ –Ω–∏–∑–∫–∏–π FOMO - –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
        - üü° –ñ—ë–ª—Ç—ã–π —Å–∏–≥–Ω–∞–ª: —Ä–∞—Å—Ç—É—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º - —Ä—ã–Ω–æ–∫ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ—Ç—Å—è
        - ‚ö™ –ë–µ–ª—ã–π —Å–∏–≥–Ω–∞–ª: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –±–µ–∑ —Å–∏–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–∫–æ—Å–æ–≤
        - üü¢ –ó–µ–ª—ë–Ω—ã–π —Å–∏–≥–Ω–∞–ª: –≤—ã—Å–æ–∫–∏–π FOMO-—Ñ–∞–∫—Ç–æ—Ä - –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–∏–∫ —Ä—ã–Ω–∫–∞
        - üîµ –°–∏–Ω–∏–π —Å–∏–≥–Ω–∞–ª: —Ä—ã–Ω–æ–∫ –≤ —Å–ø—è—á–∫–µ - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        """
        # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.last_check_time = None
        self.last_data = None
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        # –ó–∞–ø—Ä–æ—Å—ã, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞:
        # 1. –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
        # 2. FOMO –∑–∞–ø—Ä–æ—Å –æ—Ç—Ä–∞–∂–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫—É–ø–∏—Ç—å/–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        # 3. Fear –∑–∞–ø—Ä–æ—Å –æ—Ç—Ä–∞–∂–∞–µ—Ç –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ/—Å—Ç—Ä–∞—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—ã–Ω–∫–∞
        self.general_keywords = ["bitcoin", "crypto", "blockchain"]  # "bitcoin" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        self.fomo_keywords = ["buy crypto", "invest bitcoin", "crypto profit"]  # "buy crypto" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        self.fear_keywords = ["crypto crash", "bitcoin crash", "sell bitcoin"]  # "crypto crash" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.market_signals = [
            {"signal": "üî¥", "description": "High fear and low FOMO - possible buying opportunity", "weight": 1},
            {"signal": "üü†", "description": "Decreasing interest in cryptocurrencies - market cooling down", "weight": 1}, 
            {"signal": "‚ö™", "description": "Neutral interest in cryptocurrencies", "weight": 2},
            {"signal": "üü°", "description": "Growing interest in cryptocurrencies - market warming up", "weight": 1},
            {"signal": "üü¢", "description": "High FOMO factor - possible market peak", "weight": 1}
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            with open("trends_history.json", "r") as f:
                self.history_data = json.load(f)
                logger.info(f"Loaded Google Trends history: {len(self.history_data)} records")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if self.history_data:
                    most_recent = max(self.history_data, key=lambda x: x.get("timestamp", ""))
                    self.last_data = {
                        "signal": most_recent.get("signal", "‚ö™"),
                        "description": most_recent.get("description", "Neutral interest in cryptocurrencies"),
                        "fomo_score": most_recent.get("fomo_score", 50),
                        "fear_score": most_recent.get("fear_score", 50),
                        "general_score": most_recent.get("general_score", 50),
                        "fomo_to_fear_ratio": most_recent.get("fomo_to_fear_ratio", 1.0),
                        "timestamp": most_recent.get("timestamp", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                    }
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ timestamp
                    try:
                        self.last_check_time = datetime.strptime(
                            self.last_data["timestamp"], 
                            "%Y-%m-%d %H:%M:%S"
                        )
                        logger.info(f"Last Google Trends check time: {self.last_check_time}")
                    except:
                        self.last_check_time = datetime.now() - timedelta(days=1)
                        logger.warning("Could not parse last check time, using yesterday")
                    
                    logger.info(f"Using most recent Google Trends data from history: {self.last_data['signal']} - {self.last_data['description']}")
        except (FileNotFoundError, json.JSONDecodeError):
            logger.info("No Google Trends history found or invalid format, will create new")
            self.history_data = []
    
    def safe_interest_over_time(self, pytrends, retries=5, initial_delay=10):
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏ TooManyRequestsError ‚Äî –∂–¥—ë—Ç –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å —É–¥–≤–æ–µ–Ω–∏–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏.
        
        Args:
            pytrends: –≠–∫–∑–µ–º–ø–ª—è—Ä TrendReq
            retries (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            initial_delay (int): –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            DataFrame –∏–ª–∏ None: –î–∞–Ω–Ω—ã–µ –∏–∑ Google Trends –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        delay = initial_delay
        for attempt in range(1, retries + 1):
            try:
                trends_logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
                result = pytrends.interest_over_time()
                trends_logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å Google Trends (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                return result
            except TooManyRequestsError:
                if attempt == retries:
                    # –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ—É–¥–∞—á–∏ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    trends_logger.error(f"TooManyRequestsError –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
                    raise
                trends_logger.warning(f"429 Too Many Requests (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}), –∂–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay)
                delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏
        return None
    
    def get_term_interest(self, term, locale='en-US'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–µ—Ä–º–∏–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        –∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        
        Args:
            term (str): –¢–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Google Trends
            locale (str): –õ–æ–∫–∞–ª—å –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'en-US'
            
        Returns:
            float: –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–µ—Ä–º–∏–Ω—É (0-100) –∏–ª–∏ 50 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        """
        trends_logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞: {term}")
        
        try:
            # –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD YYYY-MM-DD"
            today = datetime.utcnow().date()
            start = today - timedelta(days=30)
            timeframe = f"{start} {today}"  # "YYYY-MM-DD YYYY-MM-DD"
            
            trends_logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {timeframe}")
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å—é 'en-US' –∏ —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º UTC
            pytrends = TrendReq(hl=locale, tz=0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–æ–º
            pytrends.build_payload([term], cat=0, timeframe=timeframe)
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–∞–¥–µ–∂–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–æ–≤
            data = self.safe_interest_over_time(pytrends)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if data is None or data.empty:
                trends_logger.warning(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Google Trends –¥–ª—è '{term}'")
                return 50  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π (–Ω–µ–ø–æ–ª–Ω—ã–π) –¥–µ–Ω—å
            if 'isPartial' in data.columns:
                data = data[~data['isPartial']]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞
            avg_interest = data[term].mean()
            trends_logger.info(f"–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –¥–ª—è '{term}': {avg_interest}")
            
            return avg_interest
            
        except Exception as e:
            trends_logger.error(f"–û—à–∏–±–∫–∞ pytrends –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞ '{term}': {str(e)}")
            import traceback
            trends_logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return 50  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def refresh_trends_data(self):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –¥–∞–Ω–Ω—ã—Ö Google Trends
        
        Returns:
            dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Google Trends Pulse —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.last_check_time = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        trends_data = self.get_trends_data(force_refresh=True)
        
        return trends_data
    
    def get_trends_data(self, force_refresh=False):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Trends API –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        
        Args:
            force_refresh (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–µ—à
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = datetime.now()
            
            trends_logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö Google Trends. –í—Ä–µ–º—è: {current_time}, –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.last_check_time}")
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–Ω–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ (–º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤)
            # –∏ –º—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            cache_valid = (
                self.last_check_time and 
                (current_time - self.last_check_time).total_seconds() < 24 * 3600 and 
                self.last_data and
                not force_refresh
            )
            
            if cache_valid:
                trends_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Trends (–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)")
                return self.last_data
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Trends API
            trends_logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Trends API...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ general_keywords
                general_term = self.general_keywords[0]  # "bitcoin"
                bitcoin_interest = self.get_term_interest(general_term)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (50), –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                if bitcoin_interest == 50:
                    trends_logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è 'bitcoin'")
                    
                    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ç–µ—Ä–º–∏–Ω - "cryptocurrency"
                    trends_logger.info("–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è 'cryptocurrency'...")
                    crypto_interest = self.get_term_interest("cryptocurrency")
                    
                    if crypto_interest == 50:
                        trends_logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –¥–ª—è 'cryptocurrency'")
                        
                        # –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        trends_logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Google Trends. –†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.")
                        
                        # –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                        trends_logger.warning("Google Trends API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                        
                        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Ñ–µ–π–∫–æ–≤—ã–µ), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                        if self.last_data and self.last_data.get("api_available", False):
                            trends_logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Trends –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API")
                            return self.last_data
                        
                        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —Ç–æ–∂–µ —Ñ–µ–π–∫–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                        trends_logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google Trends. –ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                        return None
                    
                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è cryptocurrency, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                    general_score = crypto_interest
                    trends_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 'cryptocurrency': {general_score}")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è bitcoin
                    general_score = bitcoin_interest
                    trends_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 'bitcoin': {general_score}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ 429
                time.sleep(random.uniform(5.0, 10.0))
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è FOMO –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ FOMO-–∑–∞–ø—Ä–æ—Å–æ–≤
                fomo_term = self.fomo_keywords[0]  # "buy crypto"
                trends_logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FOMO-—Ç–µ—Ä–º–∏–Ω–∞: {fomo_term}")
                fomo_score = self.get_term_interest(fomo_term)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ 429
                time.sleep(random.uniform(5.0, 10.0))
                
                # –î–µ–ª–∞–µ–º —Ç—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —è–≤–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç—Ä–∞—Ö–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Ä–º–∏–Ω –∏–∑ fear_keywords
                fear_term = self.fear_keywords[0]  # "crypto crash"
                trends_logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FEAR-—Ç–µ—Ä–º–∏–Ω–∞: {fear_term}")
                fear_score = self.get_term_interest(fear_term)
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è fear_term, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
                if fear_score == 50:  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    trends_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞ '{fear_term}', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ FOMO –∫ –æ–±—â–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                    buying_interest_ratio = fomo_score / general_score if general_score > 0 else 1.0
                    trends_logger.info(f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –ø–æ–∫—É–ø–∫–µ/–æ–±—â–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É: {buying_interest_ratio:.2f}")
                    
                    # –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞—Ö–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
                    if buying_interest_ratio > 1.2:  # –í—ã—Å–æ–∫–∏–π FOMO
                        # –ù–∏–∑–∫–∏–π —Å—Ç—Ä–∞—Ö, –∫–æ–≥–¥–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∫ –æ–±—â–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –≤—ã—Å–æ–∫–æ–µ
                        fear_score = max(10, int(100 - (buying_interest_ratio * 40)))
                    elif buying_interest_ratio < 0.8:  # –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∫—É–ø–∫–µ
                        # –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–∞—Ö, –∫–æ–≥–¥–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∫ –æ–±—â–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É –Ω–∏–∑–∫–æ–µ
                        fear_score = min(90, int(120 - (buying_interest_ratio * 50)))
                    else:  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                        fear_score = max(10, 100 - general_score)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç –æ–±—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
                    
                    trends_logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞—Ö–∞: {fear_score} (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è buy/general)")
                else:
                    trends_logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞—Ö–∞: {fear_score} (–ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å '{fear_term}')")
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                if not 'buying_interest_ratio' in locals():
                    buying_interest_ratio = fomo_score / general_score if general_score > 0 else 1.0
                    
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                trends_logger.info(f"–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ FOMO/–æ–±—â–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É: {buying_interest_ratio:.2f}")
                trends_logger.info(f"–ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–∞: {fear_score}")
                
                # –ï—Å–ª–∏ fomo_score —Ä–∞–≤–µ–Ω –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (–Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)
                if fomo_score == 50:
                    fomo_score = general_score
                    trends_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è FOMO –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞: {fomo_score}")
                
                # –ï—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ, –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                if fomo_score == 50 and fear_score == 50:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ general_score, –∫–æ—Ç–æ—Ä—ã–π —É –Ω–∞—Å —Ç–æ—á–Ω–æ –µ—Å—Ç—å
                    fomo_score = general_score
                    fear_score = general_score
                    
                # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è FOMO –∫ —Å—Ç—Ä–∞—Ö—É (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å)
                if fear_score < 1:
                    fear_score = 1
                fomo_to_fear_ratio = fomo_score / fear_score
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                signal, description = self._determine_market_signal(
                    fomo_score, fear_score, general_score, fomo_to_fear_ratio
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    "signal": signal,
                    "description": description,
                    "fomo_score": fomo_score,
                    "fear_score": fear_score,
                    "general_score": general_score,
                    "fomo_to_fear_ratio": fomo_to_fear_ratio,
                    "timestamp": current_time.strftime("%Y-%m-%d %H:%M:%S"),
                    "api_available": True
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_data = result
                self.last_check_time = current_time
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.history_data.append(result)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å 500 –∑–∞–ø–∏—Å—è–º–∏
                if len(self.history_data) > 500:
                    self.history_data = sorted(
                        self.history_data,
                        key=lambda x: x.get("timestamp", ""),
                        reverse=True
                    )[:500]
                
                try:
                    with open("trends_history.json", "w") as f:
                        json.dump(self.history_data, f, indent=2)
                    logger.info(f"Saved Google Trends history: {len(self.history_data)} records")
                except Exception as e:
                    logger.error(f"Error saving Google Trends history: {e}")
                
                return result
                
            except Exception as e:
                trends_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Trends API: {str(e)}")
                
                # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                trends_logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Google Trends. –†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.")
                
                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                if self.last_data:
                    trends_logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ Google Trends –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API")
                    return self.last_data
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                neutral_data = {
                    "signal": "‚ö™",
                    "description": "Neutral interest in cryptocurrencies (API error)",
                    "fomo_score": 0,
                    "fear_score": 0,
                    "general_score": 0,
                    "fomo_to_fear_ratio": 1.0,
                    "timestamp": current_time.strftime("%Y-%m-%d %H:%M:%S"),
                    "api_available": False
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_data = neutral_data
                self.last_check_time = current_time
                
                return neutral_data
                
        except Exception as e:
            trends_logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ get_trends_data: {str(e)}")
            import traceback
            trends_logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
            if self.last_data:
                return self.last_data
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            return {
                "signal": "‚ö™",
                "description": "Neutral interest in cryptocurrencies (error)",
                "fomo_score": 0,
                "fear_score": 0,
                "general_score": 0,
                "fomo_to_fear_ratio": 1.0,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "api_available": False
            }
    
    def _determine_market_signal(self, fomo_score, fear_score, general_score, fomo_to_fear_ratio):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        Args:
            fomo_score (float): –û—Ü–µ–Ω–∫–∞ FOMO-–∑–∞–ø—Ä–æ—Å–æ–≤ (buy crypto)
            fear_score (float): –û—Ü–µ–Ω–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞—Ö–æ–º (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è buy crypto/bitcoin)
            general_score (float): –û—Ü–µ–Ω–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö (bitcoin)
            fomo_to_fear_ratio (float): –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ FOMO –∫ —Å—Ç—Ä–∞—Ö—É
            
        Returns:
            tuple: (emoji-—Å–∏–≥–Ω–∞–ª, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
        """
        trends_logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: fomo={fomo_score}, fear={fear_score}, " + 
                         f"general={general_score}, ratio={fomo_to_fear_ratio:.2f}")
                         
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ FOMO –∫ —Å—Ç—Ä–∞—Ö—É —Å —É—á–µ—Ç–æ–º –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç—Ä–∞—Ö–∞
        # –∏–ª–∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è FOMO –∫ –æ–±—â–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É
        if general_score < 20:
            # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
            return "üîµ", "Market in hibernation - very low overall interest"
        elif fomo_score > 70 and fomo_score > fear_score * 1.2:
            # –í—ã—Å–æ–∫–∏–π FOMO –∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥ —Å—Ç—Ä–∞—Ö–æ–º
            return "üü¢", "High FOMO factor - possible market peak"
        elif fomo_to_fear_ratio > 2.0:
            # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ FOMO –Ω–∞–¥ —Å—Ç—Ä–∞—Ö–æ–º
            return "üü¢", "FOMO significantly exceeds fear - market optimism"
        elif fear_score > 70 and fear_score > fomo_score * 1.2:
            # –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–∞—Ö –∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥ FOMO
            return "üî¥", "High fear and low FOMO - possible buying opportunity"
        elif fomo_to_fear_ratio < 0.5:
            # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–¥ FOMO
            return "üî¥", "Fear significantly exceeds FOMO - market pessimism"
        elif general_score > 60 and fomo_score > fear_score:
            # –†–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ FOMO > Fear
            return "üü°", "Growing interest in cryptocurrencies - market warming up"
        elif general_score > 50 and fear_score > fomo_score:
            # –°–Ω–∏–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ Fear > FOMO
            return "üü†", "Decreasing interest in cryptocurrencies - market cooling down"
        elif fomo_to_fear_ratio > 1.2:
            # FOMO —É–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç—Ä–∞—Ö
            return "üü°", "FOMO exceeds fear - market optimism growing"
        else:
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            return "‚ö™", "Neutral interest in cryptocurrencies"
    
    def format_trends_message(self, trends_data=None):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            trends_data (dict, optional): –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ None –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, 
                 None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
        """
        if trends_data is None:
            trends_data = self.get_trends_data()
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–æ–±—â–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        if not trends_data:
            trends_logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Google Trends –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        signal = trends_data.get("signal", "‚ö™")
        description = trends_data.get("description", "Neutral interest in cryptocurrencies")
        api_available = trends_data.get("api_available", False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑ API –∏ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not api_available:
            trends_logger.warning("–î–∞–Ω–Ω—ã–µ Google Trends –Ω–µ –∏–∑ API, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return None
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
        message = f"{signal} Google Trends: {description}"
        return message

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    pulse = GoogleTrendsPulse()
    trends_data = pulse.get_trends_data(force_refresh=True)
    print("Google Trends Pulse —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"–°–∏–≥–Ω–∞–ª: {trends_data['signal']}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {trends_data['description']}")
    print(f"FOMO-–æ—Ü–µ–Ω–∫–∞: {trends_data['fomo_score']}")
    print(f"Fear-–æ—Ü–µ–Ω–∫–∞: {trends_data['fear_score']}")
    print(f"General-–æ—Ü–µ–Ω–∫–∞: {trends_data['general_score']}")
    print(f"FOMO/Fear —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {trends_data['fomo_to_fear_ratio']:.2f}")
    print(f"–í—Ä–µ–º—è: {trends_data['timestamp']}")
    
    message = pulse.format_trends_message(trends_data)
    print("\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:")
    print(message)