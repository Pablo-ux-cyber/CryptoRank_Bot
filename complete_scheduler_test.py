#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

import sys
import os
from datetime import datetime
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, '/home/runner/workspace')

def test_scheduler_complete():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    print("=== –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===")
    
    try:
        from load_dotenv import load_dotenv
        load_dotenv()
        
        from scheduler import SensorTowerScheduler
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = SensorTowerScheduler()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
        test_times = [
            datetime(2025, 7, 16, 8, 0, 45),  # –ó–∞ 15 —Å–µ–∫—É–Ω–¥
            datetime(2025, 7, 16, 8, 1, 0),   # –¢–æ—á–Ω–æ –≤—Ä–µ–º—è
            datetime(2025, 7, 16, 8, 1, 15),  # –ü–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏
        ]
        
        for test_time in test_times:
            print(f"\n--- –¢–µ—Å—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {test_time} ---")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            with patch('scheduler.datetime') as mock_datetime:
                mock_datetime.now.return_value = test_time
                mock_datetime.side_effect = lambda *args, **kw: datetime(*args, **kw)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
                now = test_time
                today = now.date()
                target_hour = 8
                target_minute = 1
                
                # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
                target_time = now.replace(hour=target_hour, minute=target_minute, second=0, microsecond=0)
                if now >= target_time:
                    target_time = target_time.replace(day=target_time.day + 1)
                time_diff = (target_time - now).total_seconds()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
                is_exact_time = (now.hour == target_hour and now.minute == target_minute)
                is_time_window = time_diff <= 60
                not_sent_today = (scheduler.last_rank_update_date is None or scheduler.last_rank_update_date < today)
                
                should_run = (is_exact_time or is_time_window) and not_sent_today
                
                print(f"  –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (8:01): {is_exact_time}")
                print(f"  –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ (<60—Å): {is_time_window}")
                print(f"  –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {not_sent_today}")
                print(f"  –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –ó–ê–ü–£–°–¢–ò–¢–°–Ø' if should_run else '‚ùå –ù–ï –ó–ê–ü–£–°–¢–ò–¢–°–Ø'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\n--- –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON reader
        try:
            from json_rank_reader import get_rank_from_json
            rank = get_rank_from_json()
            print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω: {rank}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Fear & Greed (—Å –º–æ–∫–∏–Ω–≥–æ–º –¥–ª—è —Ç–µ—Å—Ç–∞)
        try:
            fear_greed_data = scheduler.fear_greed_tracker.get_fear_greed_index()
            if fear_greed_data:
                print(f"‚úÖ Fear & Greed: {fear_greed_data.get('value', 'N/A')}")
            else:
                print("‚ö†Ô∏è Fear & Greed: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Fear & Greed: {str(e)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Altcoin Season
        try:
            altseason_data = scheduler.altcoin_season_index.get_altseason_index()
            if altseason_data:
                print(f"‚úÖ Altcoin Season: {altseason_data.get('index', 0):.1%}")
            else:
                print("‚ö†Ô∏è Altcoin Season: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Altcoin Season: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram Bot
        print(f"\n--- –¢–µ—Å—Ç Telegram Bot ---")
        try:
            telegram_bot = scheduler.telegram_bot
            print(f"‚úÖ TelegramBotSync —Å–æ–∑–¥–∞–Ω: {type(telegram_bot).__name__}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram Bot: {str(e)}")
        
        print(f"\n=== –ò–¢–û–ì –¢–ï–°–¢–ê ===")
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –£—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è 08:01")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        print("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_scheduler_complete()