#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
"""

import sys
import os
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from telegram_bot import TelegramBot
from scraper import SensorTowerScraper  
from fear_greed_index import FearGreedIndexTracker
from altcoin_season_index import AltcoinSeasonIndex
from market_breadth_indicator import MarketBreadthIndicator

def main():
    """–†—É—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=== –†–£–ß–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –í TELEGRAM ===")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        telegram_bot = TelegramBot()
        scraper = SensorTowerScraper()
        fear_greed_tracker = FearGreedIndexTracker()
        altcoin_season_index = AltcoinSeasonIndex()
        market_breadth = MarketBreadthIndicator()
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n--- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---")
        
        # 1. –†–µ–π—Ç–∏–Ω–≥ Coinbase
        print("üì± –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ Coinbase...")
        rank = scraper.get_rank()
        print(f"   –†–µ–π—Ç–∏–Ω–≥: {rank}")
        
        # 2. Fear & Greed Index
        print("üò® –ü–æ–ª—É—á–µ–Ω–∏–µ Fear & Greed Index...")
        fear_greed_data = fear_greed_tracker.get_fear_greed_index()
        print(f"   –ò–Ω–¥–µ–∫—Å: {fear_greed_data}")
        
        # 3. Altcoin Season Index
        print("ü™ô –ü–æ–ª—É—á–µ–Ω–∏–µ Altcoin Season Index...")
        altseason_data = altcoin_season_index.get_altseason_index()
        print(f"   –ê–ª—å—Ç–∫–æ–∏–Ω —Å–µ–∑–æ–Ω: {altseason_data}")
        
        # 4. Market Breadth Indicator
        print("üìä –ê–Ω–∞–ª–∏–∑ Market Breadth (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-4 –º–∏–Ω—É—Ç—ã)...")
        market_data = market_breadth.get_market_breadth_data()
        print(f"   Market Breadth: {market_data}")
        
        print("\n--- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = []
        
        # –†–µ–π—Ç–∏–Ω–≥ Coinbase
        if rank:
            message_parts.append(f"üì± Coinbase AppRank: #{rank}")
        
        # Fear & Greed Index
        if fear_greed_data:
            fear_greed_message = fear_greed_tracker.format_fear_greed_message(fear_greed_data)
            if fear_greed_message:
                message_parts.append(fear_greed_message)
        
        # Altcoin Season Index  
        if altseason_data:
            altseason_message = altcoin_season_index.format_altseason_message(altseason_data)
            if altseason_message:
                message_parts.append(altseason_message)
                
        # Market Breadth Indicator
        if market_data:
            market_message = market_breadth.format_simple_telegram_message(market_data)
            if market_message:
                message_parts.append(market_message)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_parts:
            final_message = "\\n".join(message_parts)
            print(f"\\n--- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ:\\n{final_message}")
            
            success = telegram_bot.send_message(final_message)
            
            if success:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
                return 1
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return 1
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    print("\\nüéâ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return 0

if __name__ == "__main__":
    sys.exit(main())