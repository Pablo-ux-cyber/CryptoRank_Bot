#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å Market Breadth - –ö–û–ü–ò–Ø —Ä–∞–±–æ—á–µ–π –ª–æ–≥–∏–∫–∏ –∏–∑ /test-message
"""

import sys
sys.path.insert(0, '/home/runner/workspace')

def test_scheduler_with_market_breadth():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å Market Breadth –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º test-message"""
    
    print("=== –¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –° MARKET BREADTH ===")
    
    try:
        from load_dotenv import load_dotenv
        load_dotenv()
        
        from scheduler import SensorTowerScheduler
        scheduler = SensorTowerScheduler()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rankings_data = {
            "app_name": "Coinbase",
            "categories": [{"rank": "139"}],
            "trend": {"direction": "same", "previous": 139}
        }
        
        # Fear & Greed –¥–∞–Ω–Ω—ã–µ
        fear_greed_data = scheduler.fear_greed_tracker.get_fear_greed_index()
        print(f"‚úÖ Fear & Greed –ø–æ–ª—É—á–µ–Ω: {fear_greed_data['value'] if fear_greed_data else '–æ—à–∏–±–∫–∞'}")
        
        # Market Breadth - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º test-message
        market_breadth_data = None
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º Market Breadth (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º test-message)...")
        
        try:
            # –í–ê–ñ–ù–û: timeout 3 –º–∏–Ω—É—Ç—ã –¥–ª—è Market Breadth
            import signal
            def timeout_handler(signum, frame):
                raise TimeoutError("Market Breadth timeout")
            
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(180)  # 3 –º–∏–Ω—É—Ç—ã
            
            market_breadth_data = scheduler.market_breadth.get_market_breadth_data(fast_mode=False)
            signal.alarm(0)
            
            if market_breadth_data:
                print(f"‚úÖ Market Breadth: {market_breadth_data['signal']} {market_breadth_data['condition']} ({market_breadth_data['current_value']:.1f}%)")
            else:
                print("‚ùå Market Breadth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except TimeoutError:
            print("‚è∞ Market Breadth –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç 3 –º–∏–Ω—É—Ç—ã")
            signal.alarm(0)
            market_breadth_data = None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Market Breadth: {str(e)}")
            signal.alarm(0)
            market_breadth_data = None
        
        print("\n--- –¢–ï–°–¢–ò–†–£–ï–ú –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –° MARKET BREADTH ---")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        success = scheduler._send_combined_message(
            rankings_data=rankings_data,
            fear_greed_data=fear_greed_data,
            market_breadth_data=market_breadth_data,
            chart_data=None
        )
        
        if success:
            print("üéØ ‚úÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –° MARKET BREADTH –†–ê–ë–û–¢–ê–ï–¢!")
            print("\nüìã –°–û–û–ë–©–ï–ù–ò–ï –°–û–î–ï–†–ñ–ò–¢:")
            print("- üîº Coinbase Appstore Rank: 139")
            print("- Fear & Greed —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º")
            if market_breadth_data:
                print(f"- Market by 200MA: {market_breadth_data['signal']} {market_breadth_data['condition']}: {market_breadth_data['current_value']:.1f}%")
            else:
                print("- Market by 200MA: –ù–ï –í–ö–õ–Æ–ß–ï–ù (—Ç–∞–π–º–∞—É—Ç)")
            print("\nüöÄ –ì–û–¢–û–í –î–õ–Ø –°–ï–†–í–ï–†–ê!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")
            
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_scheduler_with_market_breadth()