#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import numpy as np
from logger import logger

class MA200Demo:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    def __init__(self):
        self.logger = logger
        self.top_n = 50
        self.ma_period = 200
        self.history_days = 365
        self.overbought_threshold = 80
        self.oversold_threshold = 10
        self.chart_file = 'ma200_demo_chart.png'
        self.results_file = 'ma200_demo_data.csv'
        
        self.logger.info("Initialized MA200 Demo with test data")

    def generate_demo_data(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        """
        np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=self.history_days)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
        base_trend = np.linspace(20, 70, len(dates))
        seasonal = 15 * np.sin(2 * np.pi * np.arange(len(dates)) / 90)  # 90-–¥–Ω–µ–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
        noise = np.random.normal(0, 8, len(dates))
        
        percentages = base_trend + seasonal + noise
        percentages = np.clip(percentages, 0, 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 100%
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        coins_above = (percentages * self.top_n / 100).astype(int)
        
        results = []
        for date, percentage, coins in zip(dates, percentages, coins_above):
            results.append({
                'date': date.strftime('%Y-%m-%d'),
                'percentage': round(percentage, 1),
                'coins_above_ma200': coins,
                'total_coins': self.top_n
            })
        
        return pd.DataFrame(results)

    def create_demo_chart(self, results_df):
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        """
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            results_df['date_parsed'] = pd.to_datetime(results_df['date'])
            
            plt.style.use('dark_background')
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è - –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
            ax.plot(results_df['date_parsed'], results_df['percentage'], 
                   color='#00d4ff', linewidth=2, label='% –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200')
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
            ax.axhline(y=self.overbought_threshold, color='#ff4757', 
                      linestyle='--', alpha=0.7, label=f'–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({self.overbought_threshold}%)')
            ax.axhline(y=self.oversold_threshold, color='#2ed573', 
                      linestyle='--', alpha=0.7, label=f'–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({self.oversold_threshold}%)')
            
            # –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
            ax.fill_between(results_df['date_parsed'], 0, self.oversold_threshold, 
                           alpha=0.2, color='#2ed573', label='–ó–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏')
            ax.fill_between(results_df['date_parsed'], self.overbought_threshold, 100, 
                           alpha=0.2, color='#ff4757', label='–ó–æ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ax.set_title(f'MA200 Indicator: % –º–æ–Ω–µ—Ç –∏–∑ —Ç–æ–ø-{self.top_n} –≤—ã—à–µ MA{self.ma_period} (DEMO)', 
                        fontsize=16, fontweight='bold', color='white')
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12, color='white')
            ax.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 (%)', fontsize=12, color='white')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
            ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
            
            # –°–µ—Ç–∫–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞
            ax.grid(True, alpha=0.3, color='white')
            ax.legend(loc='upper left', framealpha=0.8)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –æ—Å–µ–π
            ax.tick_params(colors='white')
            ax.spines['bottom'].set_color('white')
            ax.spines['top'].set_color('white')
            ax.spines['right'].set_color('white')
            ax.spines['left'].set_color('white')
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ Y
            ax.set_ylim(0, 100)
            
            plt.tight_layout()
            plt.savefig(self.chart_file, dpi=300, bbox_inches='tight', 
                       facecolor='#1a1a1a', edgecolor='none')
            plt.close()
            
            self.logger.info(f"–î–µ–º–æ –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.chart_file}")
            return self.chart_file
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            return None

    def get_demo_ma200_indicator(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            results_df = self.generate_demo_data()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            results_df.to_csv(self.results_file, index=False)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = self.create_demo_chart(results_df)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            latest_data = results_df.iloc[-1]
            current_percentage = latest_data['percentage']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∏ —Å—Ç–∞—Ç—É—Å
            signal, status, description = self._determine_market_signal(current_percentage)
            
            result = {
                'percentage': round(current_percentage, 1),
                'coins_above_ma200': latest_data['coins_above_ma200'],
                'total_coins': latest_data['total_coins'],
                'signal': signal,
                'status': status,
                'description': description,
                'date': latest_data['date'],
                'chart_path': chart_path,
                'history_days': self.history_days,
                'ma_period': self.ma_period,
                'top_n': self.top_n,
                'overbought_threshold': self.overbought_threshold,
                'oversold_threshold': self.oversold_threshold,
                'timestamp': datetime.now().isoformat(),
                'demo_mode': True
            }
            
            self.logger.info(f"MA200 Demo: {current_percentage:.1f}% ({signal}) - {status}")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö MA200: {str(e)}")
            return None

    def _determine_market_signal(self, percentage):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
        """
        if percentage <= self.oversold_threshold:
            return "üî¥", "Oversold", "Most coins below MA200 - potential buying opportunity"
        elif percentage <= 30:
            return "üü†", "Weak Market", "Few coins above MA200 - bearish trend"
        elif percentage <= 70:
            return "üü°", "Neutral Market", "Moderate amount of coins above MA200"
        elif percentage < self.overbought_threshold:
            return "üü¢", "Strong Market", "Most coins above MA200 - bullish trend"
        else:
            return "üîµ", "Overbought", "Almost all coins above MA200 - potential selling opportunity"

    def format_ma200_message(self, ma200_data=None):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ MA200 –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        try:
            if ma200_data is None:
                ma200_data = self.get_demo_ma200_indicator()
            
            if ma200_data is None:
                return None
            
            message = f"""{ma200_data['signal']} *MA200 Market Indicator \\(DEMO\\)*

*Current Status:* {ma200_data['status']}
*Coins above MA200:* {ma200_data['coins_above_ma200']}/{ma200_data['total_coins']} \\({ma200_data['percentage']}%\\)

*Market Signal:* {ma200_data['description']}

*Analysis:*
‚Ä¢ MA Period: {ma200_data['ma_period']} days
‚Ä¢ Top coins analyzed: {ma200_data['top_n']}
‚Ä¢ History period: {ma200_data['history_days']} days
‚Ä¢ Overbought level: {ma200_data['overbought_threshold']}%
‚Ä¢ Oversold level: {ma200_data['oversold_threshold']}%

*Last Update:* {ma200_data['date']}

‚ö†Ô∏è *DEMO MODE \\- Using simulated data for demonstration*

_The MA200 indicator shows what percentage of top cryptocurrencies are trading above their 200\\-day moving average\\. Values above 80% often indicate market peaks, while values below 10% may signal buying opportunities\\._"""

            return message
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏—è MA200: {str(e)}")
            return None