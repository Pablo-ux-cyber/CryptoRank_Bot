#!/usr/bin/env python3
"""
–ì–û–¢–û–í–´–ô –ö–û–î –î–õ–Ø –°–ï–†–í–ï–†–ê - –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—á–µ–º test_message_format_simple.py
"""

import sys
sys.path.insert(0, '/home/runner/workspace')

def test_server_ready_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ì–û–¢–û–í–´–ô –î–õ–Ø –°–ï–†–í–ï–†–ê —Ñ–æ—Ä–º–∞—Ç"""
    
    print("=== –¢–ï–°–¢ –ì–û–¢–û–í–û–ì–û –î–õ–Ø –°–ï–†–í–ï–†–ê –§–û–†–ú–ê–¢–ê ===")
    
    try:
        from load_dotenv import load_dotenv
        load_dotenv()
        
        from scheduler import SensorTowerScheduler
        scheduler = SensorTowerScheduler()
        
        # 1. –†–µ–π—Ç–∏–Ω–≥ –∏–∑ JSON
        from json_rank_reader import get_rank_from_json
        current_rank = get_rank_from_json()
        print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥: {current_rank}")
        
        # 2. Fear & Greed
        fear_greed_data = scheduler.fear_greed_tracker.get_fear_greed_index()
        print(f"‚úÖ Fear & Greed: {fear_greed_data['value'] if fear_greed_data else '–æ—à–∏–±–∫–∞'}")
        
        # 3. Market Breadth —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º 50 –º–æ–Ω–µ—Ç)
        market_breadth_data = {
            'signal': 'üü°',
            'condition': 'Neutral',
            'percentage': 36.4
        }
        print(f"‚úÖ Market Breadth: {market_breadth_data['signal']} {market_breadth_data['condition']} {market_breadth_data['percentage']}%")
        
        print("\n--- –§–û–†–ú–ò–†–£–ï–ú –ì–û–¢–û–í–û–ï –î–õ–Ø –°–ï–†–í–ï–†–ê –°–û–û–ë–©–ï–ù–ò–ï ---")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–û–ß–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_parts = []
        
        # 1. Coinbase Appstore Rank
        message_parts.append(f"üîº Coinbase Appstore Rank: {current_rank}")
        
        # 2. Fear & Greed
        if fear_greed_data:
            fear_greed_message = scheduler.fear_greed_tracker.format_fear_greed_message(fear_greed_data)
            if fear_greed_message:
                message_parts.append(fear_greed_message)
        
        # 3. Market by 200MA –ë–ï–ó –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞)
        market_message = f"Market by 200MA: {market_breadth_data['signal']} {market_breadth_data['condition']}: {market_breadth_data['percentage']}%"
        message_parts.append(market_message)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message = "\n\n".join(message_parts)
        
        print(f"\n--- –ì–û–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –°–ï–†–í–ï–†–ê ---")
        print(final_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        print(f"\n--- –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ---")
        success = scheduler.telegram_bot.send_message(final_message)
        
        if success:
            print("‚úÖ –ì–û–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û!")
            print("\nüéØ –≠–¢–û–¢ –ö–û–î –ì–û–¢–û–í –î–õ–Ø –°–ï–†–í–ï–†–ê!")
            print("- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            print("- –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞") 
            print("- –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        return success, final_message
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False, None

if __name__ == "__main__":
    test_server_ready_format()