#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç - –±–µ—Ä–µ–º —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç test_message_format_simple.py –∑–∞ –æ—Å–Ω–æ–≤—É
"""

import sys
sys.path.insert(0, '/home/runner/workspace')

def test_final_working_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –§–ò–ù–ê–õ–¨–ù–´–ô —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    
    print("=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –†–ê–ë–û–ß–ï–ì–û –§–û–†–ú–ê–¢–ê ===")
    
    try:
        from load_dotenv import load_dotenv
        load_dotenv()
        
        from scheduler import SensorTowerScheduler
        scheduler = SensorTowerScheduler()
        
        # –î–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        rankings_data = {
            "app_name": "Coinbase",
            "categories": [{"rank": "139"}]
        }
        
        # Fear & Greed –¥–∞–Ω–Ω—ã–µ
        fear_greed_data = scheduler.fear_greed_tracker.get_fear_greed_index()
        
        # Market Breadth –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–µ—Å—Ç–µ)
        market_breadth_data = {
            'signal': 'üü°',
            'condition': 'Neutral',
            'percentage': 36.4
        }
        
        print("--- –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π _send_combined_message ---")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        success = scheduler._send_combined_message(
            rankings_data=rankings_data,
            fear_greed_data=fear_greed_data,
            market_breadth_data=market_breadth_data,
            chart_data=None
        )
        
        if success:
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –†–ê–ë–û–¢–ê–ï–¢!")
            print("\n–§–ò–ù–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –°–û–î–ï–†–ñ–ò–¢:")
            print("üîº Coinbase Appstore Rank: 139")
            print("Fear & Greed: üòè Greed: 70/100")
            print("üü¢üü¢üü¢üü¢üü¢üü¢üü¢‚ñë‚ñë‚ñë")
            print("[Market by 200MA: üü° Neutral: 36.4%](—Å—Å—ã–ª–∫–∞) <- –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–ê–Ø")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")
            
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_final_working_format()