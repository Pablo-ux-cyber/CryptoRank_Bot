import os
import json
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('migration_script')

def main():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ JSON –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
    """
    logger.info("–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞—Ö")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    history_dir = "history"
    bitcoin_json = os.path.join(history_dir, "active_addresses_bitcoin.json")
    ethereum_json = os.path.join(history_dir, "active_addresses_ethereum.json")
    main_history_file = "active_addresses_history.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(bitcoin_json) or not os.path.exists(ethereum_json):
        logger.error("–§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ bootstrap_active_addresses.py")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    try:
        with open(bitcoin_json, 'r') as f:
            bitcoin_data = json.load(f)
        
        with open(ethereum_json, 'r') as f:
            ethereum_data = json.load(f)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(bitcoin_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è Bitcoin, {len(ethereum_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è Ethereum")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
        try:
            with open(main_history_file, 'r') as f:
                main_history = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            main_history = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
        new_entries = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Bitcoin
        for entry in bitcoin_data:
            # –í—ã—á–∏—Å–ª—è–µ–º delta_pct –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            if len(bitcoin_data) > 1:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
                idx = bitcoin_data.index(entry)
                # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å, –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                if idx > 0:
                    prev_value = bitcoin_data[idx-1]['value']
                    if prev_value > 0:  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                        delta_pct = (entry['value'] - prev_value) / prev_value * 100
                    else:
                        delta_pct = 0.0
                else:
                    delta_pct = 0.0
            else:
                delta_pct = 0.0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ delta_pct
            if delta_pct < -10:
                status = "Very Low Demand"
                emoji = "üìâ"
            elif delta_pct < -2:
                status = "Weakened Demand"
                emoji = "üîª"
            elif delta_pct <= 2:
                status = "Normal Level"
                emoji = "‚öñÔ∏è"
            elif delta_pct <= 10:
                status = "Increased Demand"
                emoji = "üî∫"
            else:
                status = "Very High Demand"
                emoji = "üìà"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
            history_entry = {
                "chain": entry['chain'],
                "symbol": entry['symbol'],
                "value": entry['value'],
                "delta_pct": delta_pct,
                "status": status,
                "emoji": emoji,
                "timestamp": datetime.fromtimestamp(entry['timestamp']).isoformat()
            }
            
            new_entries.append(history_entry)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Ethereum
        for entry in ethereum_data:
            # –í—ã—á–∏—Å–ª—è–µ–º delta_pct –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            if len(ethereum_data) > 1:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
                idx = ethereum_data.index(entry)
                # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å, –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                if idx > 0:
                    prev_value = ethereum_data[idx-1]['value']
                    if prev_value > 0:  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                        delta_pct = (entry['value'] - prev_value) / prev_value * 100
                    else:
                        delta_pct = 0.0
                else:
                    delta_pct = 0.0
            else:
                delta_pct = 0.0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ delta_pct
            if delta_pct < -10:
                status = "Very Low Demand"
                emoji = "üìâ"
            elif delta_pct < -2:
                status = "Weakened Demand"
                emoji = "üîª"
            elif delta_pct <= 2:
                status = "Normal Level"
                emoji = "‚öñÔ∏è"
            elif delta_pct <= 10:
                status = "Increased Demand"
                emoji = "üî∫"
            else:
                status = "Very High Demand"
                emoji = "üìà"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
            history_entry = {
                "chain": entry['chain'],
                "symbol": entry['symbol'],
                "value": entry['value'],
                "delta_pct": delta_pct,
                "status": status,
                "emoji": emoji,
                "timestamp": datetime.fromtimestamp(entry['timestamp']).isoformat()
            }
            
            new_entries.append(history_entry)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        main_history.extend(new_entries)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        main_history.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        with open(main_history_file, 'w') as f:
            json.dump(main_history, f, indent=2)
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_entries)} –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

if __name__ == "__main__":
    main()