import os
import json
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('migration_script')

def calculate_and_classify_delta(current_value, previous_value):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    
    Args:
        current_value (int): –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        previous_value (int): –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        tuple: (delta_pct, status, emoji)
    """
    if previous_value <= 0:
        return 0.0, "Normal Level", "‚öñÔ∏è"
    
    delta_pct = (current_value - previous_value) / previous_value * 100
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if delta_pct < -10:
        return delta_pct, "Very Low Demand", "üìâ"
    elif delta_pct < -2:
        return delta_pct, "Weakened Demand", "üîª"
    elif delta_pct <= 2:
        return delta_pct, "Normal Level", "‚öñÔ∏è"
    elif delta_pct <= 10:
        return delta_pct, "Increased Demand", "üî∫"
    else:
        return delta_pct, "Very High Demand", "üìà"

def process_data_to_history(data, reference_period=7):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–ø–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    
    Args:
        data (list): –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
        reference_period (int): –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–¥–Ω–∏)
        
    Returns:
        list: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if not data:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    data = sorted(data, key=lambda x: x.get('timestamp', 0))
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
    history_entries = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for i, entry in enumerate(data):
        # –î–ª—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if i == 0:
            delta_pct = 0.0
            status = "Normal Level"
            emoji = "‚öñÔ∏è"
        else:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            ref_idx = max(0, i - reference_period)
            ref_entry = data[ref_idx]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            delta_pct, status, emoji = calculate_and_classify_delta(
                entry['value'], ref_entry['value']
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history_entry = {
            "chain": entry['chain'],
            "symbol": entry['symbol'],
            "value": entry['value'],
            "delta_pct": delta_pct,
            "status": status,
            "emoji": emoji,
            "timestamp": datetime.fromtimestamp(entry['timestamp']).isoformat()
        }
        
        history_entries.append(history_entry)
    
    return history_entries

def main():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ JSON –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
    """
    logger.info("–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞—Ö")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    history_dir = "history"
    bitcoin_json = os.path.join(history_dir, "active_addresses_bitcoin.json")
    ethereum_json = os.path.join(history_dir, "active_addresses_ethereum.json")
    main_history_file = "active_addresses_history.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    files_exists = True
    if not os.path.exists(bitcoin_json):
        logger.warning(f"–§–∞–π–ª {bitcoin_json} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        files_exists = False
    
    if not os.path.exists(ethereum_json):
        logger.warning(f"–§–∞–π–ª {ethereum_json} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        files_exists = False
    
    if not files_exists:
        logger.error("–§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ bootstrap_active_addresses.py")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    try:
        btc_data = []
        eth_data = []
        
        with open(bitcoin_json, 'r') as f:
            btc_data = json.load(f)
        
        with open(ethereum_json, 'r') as f:
            eth_data = json.load(f)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(btc_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è Bitcoin, {len(eth_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è Ethereum")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
        try:
            with open(main_history_file, 'r') as f:
                main_history = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            main_history = []
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        main_history = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
        btc_history = process_data_to_history(btc_data)
        eth_history = process_data_to_history(eth_data)
        
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(btc_history)} –¥–ª—è Bitcoin, {len(eth_history)} –¥–ª—è Ethereum")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏
        main_history.extend(btc_history)
        main_history.extend(eth_history)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        main_history.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        with open(main_history_file, 'w') as f:
            json.dump(main_history, f, indent=2)
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(btc_history) + len(eth_history)} –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    main()