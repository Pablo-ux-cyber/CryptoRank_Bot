#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
"""

import sys
sys.path.insert(0, '/home/runner/workspace')

def test_final_message():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    print("=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===")
    
    try:
        from load_dotenv import load_dotenv
        load_dotenv()
        
        from scheduler import SensorTowerScheduler
        scheduler = SensorTowerScheduler()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rankings_data = {
            "app_name": "Coinbase",
            "categories": [{"rank": "139"}],
            "trend": {"direction": "same", "previous": 139}
        }
        
        # Fear & Greed –¥–∞–Ω–Ω—ã–µ
        fear_greed_data = scheduler.fear_greed_tracker.get_fear_greed_index()
        
        print("--- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ë–ï–ó Market Breadth –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
        success = scheduler._send_combined_message(
            rankings_data=rankings_data,
            fear_greed_data=fear_greed_data,
            market_breadth_data=None,
            chart_data=None
        )
        
        if success:
            print("üéØ ‚úÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –¢–ï–ü–ï–†–¨ –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢!")
            print("\nüìã –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï:")
            print("üîº Coinbase Appstore Rank: 139")
            print("")
            print("Fear & Greed: üòè Greed: 70/100")  
            print("üü¢üü¢üü¢üü¢üü¢üü¢üü¢‚ñë‚ñë‚ñë")
            print("\nüöÄ –ì–û–¢–û–í –î–õ–Ø –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø –ù–ê –°–ï–†–í–ï–†–ï!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_final_message()