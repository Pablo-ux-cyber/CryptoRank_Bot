#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
"""

from datetime import datetime

def verify_scheduler_timing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏"""
    
    print("=== –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ò –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ï ===")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∑–∞–ø—É—Å–∫–∞
    test_cases = [
        # (–≤—Ä–µ–º—è, –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ)
        (datetime(2025, 7, 16, 7, 59, 0), False, "–ó–∞ 2 –º–∏–Ω—É—Ç—ã - –ù–ï –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"),
        (datetime(2025, 7, 16, 8, 0, 45), True, "–ó–∞ 15 —Å–µ–∫—É–Ω–¥ - –î–û–õ–ñ–ï–ù –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"),
        (datetime(2025, 7, 16, 8, 1, 0), True, "–¢–æ—á–Ω–æ 08:01:00 - –î–û–õ–ñ–ï–ù –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"),
        (datetime(2025, 7, 16, 8, 1, 30), True, "08:01:30 - –î–û–õ–ñ–ï–ù –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"),
        (datetime(2025, 7, 16, 8, 1, 59), True, "08:01:59 - –î–û–õ–ñ–ï–ù –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"),
        (datetime(2025, 7, 16, 8, 2, 0), False, "08:02:00 - –ù–ï –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"),
    ]
    
    all_passed = True
    
    for now, expected, description in test_cases:
        # –õ–æ–≥–∏–∫–∞ –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ scheduler.py
        target_hour = 8
        target_minute = 1
        today = now.date()
        last_rank_update_date = None  # –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
        target_time = now.replace(hour=target_hour, minute=target_minute, second=0, microsecond=0)
        if now >= target_time:
            target_time = target_time.replace(day=target_time.day + 1)
        time_diff = (target_time - now).total_seconds()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        is_exact_time = (now.hour == target_hour and now.minute == target_minute)
        is_time_window = time_diff <= 60
        not_sent_today = (last_rank_update_date is None or last_rank_update_date < today)
        
        should_run = (is_exact_time or is_time_window) and not_sent_today
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        status = "‚úÖ –ü–†–û–®–ï–õ" if should_run == expected else "‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø"
        if should_run != expected:
            all_passed = False
        
        print(f"{status} | {now.strftime('%H:%M:%S')} | {description}")
        print(f"        is_exact_time: {is_exact_time}, is_time_window: {is_time_window}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {should_run}")
    
    print(f"\n=== –ò–¢–û–ì ===")
    if all_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–µ—Ä–∏–æ–¥ 08:01:00-08:01:59")
    else:
        print("‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –õ–û–ì–ò–ö–ï!")
    
    return all_passed

if __name__ == "__main__":
    verify_scheduler_timing()