#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import json
import requests
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from tqdm import tqdm
from logger import logger

class MA200Indicator:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è MA200 Indicator
        
        –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:
        - üî¥ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (<10%): –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∏–∂–µ MA200 - –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–∫—É–ø–∫–∏
        - üü† –°–ª–∞–±—ã–π —Ä—ã–Ω–æ–∫ (10%-30%): –ú–∞–ª–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 - –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
        - üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ (30%-70%): –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
        - üü¢ –°–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ (70%-80%): –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 - –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
        - üîµ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (>80%): –ü–æ—á—Ç–∏ –≤—Å–µ –º–æ–Ω–µ—Ç—ã –≤—ã—à–µ MA200 - –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂–∏
        """
        self.logger = logger
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.py
        try:
            from config import (MA200_TOP_N, MA200_MA_PERIOD, MA200_HISTORY_DAYS, 
                              MA200_OVERBOUGHT_THRESHOLD, MA200_OVERSOLD_THRESHOLD,
                              MA200_CACHE_FILE, MA200_RESULTS_FILE, MA200_CHART_FILE)
            self.top_n = MA200_TOP_N
            self.ma_period = MA200_MA_PERIOD
            self.history_days = MA200_HISTORY_DAYS
            self.overbought_threshold = MA200_OVERBOUGHT_THRESHOLD
            self.oversold_threshold = MA200_OVERSOLD_THRESHOLD
            self.cache_file = MA200_CACHE_FILE
            self.results_file = MA200_RESULTS_FILE
            self.chart_file = MA200_CHART_FILE
        except ImportError:
            # Fallback –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.top_n = int(os.getenv('MA200_TOP_N', '50'))
            self.ma_period = int(os.getenv('MA200_MA_PERIOD', '200'))
            self.history_days = int(os.getenv('MA200_HISTORY_DAYS', '365'))
            self.overbought_threshold = float(os.getenv('MA200_OVERBOUGHT_THRESHOLD', '80'))
            self.oversold_threshold = float(os.getenv('MA200_OVERSOLD_THRESHOLD', '10'))
            self.cache_file = os.getenv('MA200_CACHE_FILE', 'ma200_cache.json')
            self.results_file = os.getenv('MA200_RESULTS_FILE', 'ma200_data.csv')
            self.chart_file = os.getenv('MA200_CHART_FILE', 'ma200_chart.png')
        
        self.base_url = "https://api.coingecko.com/api/v3"
        self.request_delay = 1.3  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ CoinGecko API
        
        self.logger.info(f"Initialized MA200 Indicator with top {self.top_n} coins, {self.ma_period}d MA, {self.history_days}d history")
        self.logger.info(f"Thresholds: Overbought={self.overbought_threshold}%, Oversold={self.oversold_threshold}%")

    def get_top_coins(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-N –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–Ω–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            url = f"{self.base_url}/coins/markets"
            params = {
                'vs_currency': 'usd',
                'order': 'market_cap_desc',
                'per_page': self.top_n,
                'page': 1,
                'sparkline': False
            }
            
            response = requests.get(url, params=params, timeout=30)
            response.raise_for_status()
            
            coins = response.json()
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ {len(coins)} –º–æ–Ω–µ—Ç –∏–∑ —Ç–æ–ø-{self.top_n}")
            
            return coins
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–ø –º–æ–Ω–µ—Ç: {str(e)}")
            return None

    def get_historical_data(self, coin_id, days):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω –¥–ª—è –º–æ–Ω–µ—Ç—ã
        
        Args:
            coin_id (str): ID –º–æ–Ω–µ—Ç—ã –≤ CoinGecko
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
            
        Returns:
            pd.DataFrame: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            url = f"{self.base_url}/coins/{coin_id}/market_chart"
            params = {
                'vs_currency': 'usd',
                'days': days,
                'interval': 'daily'
            }
            
            response = requests.get(url, params=params, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
            prices = data['prices']
            df = pd.DataFrame(prices)
            df.columns = ['timestamp', 'price']
            df['date'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df[['date', 'price']]
            df = df.set_index('date')
            
            return df
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin_id}: {str(e)}")
            return None

    def load_cache(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Returns:
            dict: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r') as f:
                    cache = json.load(f)
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫–µ—à —Å –¥–∞–Ω–Ω—ã–º–∏ {len(cache)} –º–æ–Ω–µ—Ç")
                return cache
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: {str(e)}")
        
        return {}

    def save_cache(self, cache):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            cache (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            with open(self.cache_file, 'w') as f:
                json.dump(cache, f, indent=2)
            self.logger.info(f"–ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ {len(cache)} –º–æ–Ω–µ—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: {str(e)}")

    def calculate_ma200_percentage(self, force_refresh=False):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        
        Args:
            force_refresh (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–µ—à
            
        Returns:
            pd.DataFrame: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ None
        """
        self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à
        cache = {} if force_refresh else self.load_cache()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç
        coins = self.get_top_coins()
        if not coins:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (MA –ø–µ—Ä–∏–æ–¥ + –∏—Å—Ç–æ—Ä–∏—è + –∑–∞–ø–∞—Å)
        total_days = self.ma_period + self.history_days + 50
        
        coin_data = {}
        valid_coins = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        for coin in tqdm(coins, desc="–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"):
            coin_id = coin['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = f"{coin_id}_{total_days}"
            if cache_key in cache and not force_refresh:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
                cache_date = datetime.fromisoformat(cache[cache_key]['updated'])
                if (datetime.now() - cache_date).days < 1:
                    coin_data[coin_id] = pd.DataFrame(cache[cache_key]['data'])
                    coin_data[coin_id]['date'] = pd.to_datetime(coin_data[coin_id]['date'])
                    coin_data[coin_id] = coin_data[coin_id].set_index('date')
                    valid_coins.append(coin_id)
                    continue
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            df = self.get_historical_data(coin_id, total_days)
            if df is not None and len(df) >= (self.ma_period + self.history_days):
                coin_data[coin_id] = df
                valid_coins.append(coin_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                cache[cache_key] = {
                    'data': df.reset_index().to_dict('records'),
                    'updated': datetime.now().isoformat()
                }
            else:
                self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin_id}, –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            time.sleep(self.request_delay)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
        self.save_cache(cache)
        
        if not valid_coins:
            self.logger.error("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(valid_coins)} –º–æ–Ω–µ—Ç –∏–∑ {len(coins)}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=self.history_days)
        
        results = []
        
        for i in range(self.history_days):
            current_date = end_date - timedelta(days=self.history_days - 1 - i)
            coins_above_ma200 = 0
            total_coins_checked = 0
            
            for coin_id in valid_coins:
                df = coin_data[coin_id]
                
                # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                try:
                    current_price_data = df[df.index.date <= current_date]
                    if len(current_price_data) == 0:
                        continue
                    
                    current_price = current_price_data.iloc[-1]['price']
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MA200 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 200 –¥–Ω–µ–π
                    ma_data = current_price_data.iloc[-(self.ma_period+1):-1]
                    if len(ma_data) >= self.ma_period:
                        ma200 = ma_data['price'].mean()
                        
                        if current_price > ma200:
                            coins_above_ma200 += 1
                        
                        total_coins_checked += 1
                except Exception as e:
                    continue
            
            if total_coins_checked > 0:
                percentage = (coins_above_ma200 / total_coins_checked) * 100
                results.append({
                    'date': current_date,
                    'percentage': percentage,
                    'coins_above_ma200': coins_above_ma200,
                    'total_coins': total_coins_checked
                })
        
        results_df = pd.DataFrame(results)
        results_df['date'] = pd.to_datetime(results_df['date'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
        try:
            results_df.to_csv(self.results_file, index=False)
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_file}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        
        return results_df

    def create_chart(self, results_df):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
        Args:
            results_df (pd.DataFrame): DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É –∏–ª–∏ None
        """
        try:
            plt.style.use('dark_background')
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è - –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
            ax.plot(results_df['date'], results_df['percentage'], 
                   color='#00d4ff', linewidth=2, label='% –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200')
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
            ax.axhline(y=self.overbought_threshold, color='#ff4757', 
                      linestyle='--', alpha=0.7, label=f'–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({self.overbought_threshold}%)')
            ax.axhline(y=self.oversold_threshold, color='#2ed573', 
                      linestyle='--', alpha=0.7, label=f'–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({self.oversold_threshold}%)')
            
            # –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
            ax.fill_between(results_df['date'], 0, self.oversold_threshold, 
                           alpha=0.2, color='#2ed573', label='–ó–æ–Ω–∞ –ø–æ–∫—É–ø–∫–∏')
            ax.fill_between(results_df['date'], self.overbought_threshold, 100, 
                           alpha=0.2, color='#ff4757', label='–ó–æ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ax.set_title(f'MA200 Indicator: % –º–æ–Ω–µ—Ç –∏–∑ —Ç–æ–ø-{self.top_n} –≤—ã—à–µ MA{self.ma_period}', 
                        fontsize=16, fontweight='bold', color='white')
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12, color='white')
            ax.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 (%)', fontsize=12, color='white')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
            ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
            
            # –°–µ—Ç–∫–∞ –∏ –ª–µ–≥–µ–Ω–¥–∞
            ax.grid(True, alpha=0.3, color='white')
            ax.legend(loc='upper left', framealpha=0.8)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –æ—Å–µ–π
            ax.tick_params(colors='white')
            ax.spines['bottom'].set_color('white')
            ax.spines['top'].set_color('white')
            ax.spines['right'].set_color('white')
            ax.spines['left'].set_color('white')
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ Y
            ax.set_ylim(0, 100)
            
            plt.tight_layout()
            plt.savefig(self.chart_file, dpi=300, bbox_inches='tight', 
                       facecolor='#1a1a1a', edgecolor='none')
            plt.close()
            
            self.logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.chart_file}")
            return self.chart_file
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            return None

    def get_ma200_indicator(self, force_refresh=False):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
        Args:
            force_refresh (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            results_df = self.calculate_ma200_percentage(force_refresh)
            if results_df is None or len(results_df) == 0:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = self.create_chart(results_df)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            latest_data = results_df.iloc[-1]
            current_percentage = latest_data['percentage']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∏ —Å—Ç–∞—Ç—É—Å
            signal, status, description = self._determine_market_signal(current_percentage)
            
            result = {
                'percentage': round(current_percentage, 1),
                'coins_above_ma200': latest_data['coins_above_ma200'],
                'total_coins': latest_data['total_coins'],
                'signal': signal,
                'status': status,
                'description': description,
                'date': latest_data['date'].strftime('%Y-%m-%d'),
                'chart_path': chart_path,
                'history_days': self.history_days,
                'ma_period': self.ma_period,
                'top_n': self.top_n,
                'overbought_threshold': self.overbought_threshold,
                'oversold_threshold': self.oversold_threshold,
                'timestamp': datetime.now().isoformat()
            }
            
            self.logger.info(f"MA200 Indicator: {current_percentage:.1f}% ({signal}) - {status}")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {str(e)}")
            return None

    def _determine_market_signal(self, percentage):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
        
        Args:
            percentage (float): –ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
            
        Returns:
            tuple: (emoji-—Å–∏–≥–Ω–∞–ª, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –æ–ø–∏—Å–∞–Ω–∏–µ)
        """
        if percentage <= self.oversold_threshold:
            return "üî¥", "Oversold", "Most coins below MA200 - potential buying opportunity"
        elif percentage <= 30:
            return "üü†", "Weak Market", "Few coins above MA200 - bearish trend"
        elif percentage <= 70:
            return "üü°", "Neutral Market", "Moderate amount of coins above MA200"
        elif percentage < self.overbought_threshold:
            return "üü¢", "Strong Market", "Most coins above MA200 - bullish trend"
        else:
            return "üîµ", "Overbought", "Almost all coins above MA200 - potential selling opportunity"

    def format_ma200_message(self, ma200_data=None):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            ma200_data (dict, optional): –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            if ma200_data is None:
                ma200_data = self.get_ma200_indicator()
            
            if ma200_data is None:
                return None
            
            message = f"""{ma200_data['signal']} *MA200 Market Indicator*

*Current Status:* {ma200_data['status']}
*Coins above MA200:* {ma200_data['coins_above_ma200']}/{ma200_data['total_coins']} \\({ma200_data['percentage']}%\\)

*Market Signal:* {ma200_data['description']}

*Analysis:*
‚Ä¢ MA Period: {ma200_data['ma_period']} days
‚Ä¢ Top coins analyzed: {ma200_data['top_n']}
‚Ä¢ History period: {ma200_data['history_days']} days
‚Ä¢ Overbought level: {ma200_data['overbought_threshold']}%
‚Ä¢ Oversold level: {ma200_data['oversold_threshold']}%

*Last Update:* {ma200_data['date']}

_The MA200 indicator shows what percentage of top cryptocurrencies are trading above their 200\\-day moving average\\. Values above 80% often indicate market peaks, while values below 10% may signal buying opportunities\\._"""

            return message
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è MA200: {str(e)}")
            return None