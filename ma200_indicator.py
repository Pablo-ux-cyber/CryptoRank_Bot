#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import time
import json
import requests
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from tqdm import tqdm
from logger import logger

class MA200Indicator:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è MA200 Indicator
        
        –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:
        - üî¥ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (<10%): –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∏–∂–µ MA200 - –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–∫—É–ø–∫–∏
        - üü† –°–ª–∞–±—ã–π —Ä—ã–Ω–æ–∫ (10%-30%): –ú–∞–ª–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 - –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
        - üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ (30%-70%): –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
        - üü¢ –°–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ (70%-80%): –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 - –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
        - üîµ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (>80%): –ü–æ—á—Ç–∏ –≤—Å–µ –º–æ–Ω–µ—Ç—ã –≤—ã—à–µ MA200 - –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂–∏
        """
        self.logger = logger
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.py
        try:
            from config import (MA200_TOP_N, MA200_MA_PERIOD, MA200_HISTORY_DAYS, 
                              MA200_OVERBOUGHT_THRESHOLD, MA200_OVERSOLD_THRESHOLD,
                              MA200_CACHE_FILE, MA200_RESULTS_FILE, MA200_CHART_FILE)
            self.top_n = MA200_TOP_N
            self.ma_period = MA200_MA_PERIOD
            self.history_days = MA200_HISTORY_DAYS
            self.overbought_threshold = MA200_OVERBOUGHT_THRESHOLD
            self.oversold_threshold = MA200_OVERSOLD_THRESHOLD
            self.cache_file = MA200_CACHE_FILE
            self.results_file = MA200_RESULTS_FILE
            self.chart_file = MA200_CHART_FILE
        except ImportError:
            # Fallback –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.top_n = int(os.getenv('MA200_TOP_N', '50'))
            self.ma_period = int(os.getenv('MA200_MA_PERIOD', '200'))
            self.history_days = int(os.getenv('MA200_HISTORY_DAYS', '365'))
            self.overbought_threshold = float(os.getenv('MA200_OVERBOUGHT_THRESHOLD', '80'))
            self.oversold_threshold = float(os.getenv('MA200_OVERSOLD_THRESHOLD', '10'))
            self.cache_file = os.getenv('MA200_CACHE_FILE', 'ma200_cache.json')
            self.results_file = os.getenv('MA200_RESULTS_FILE', 'ma200_data.csv')
            self.chart_file = os.getenv('MA200_CHART_FILE', 'ma200_chart.png')
        
        self.base_url = "https://min-api.cryptocompare.com/data"
        self.request_delay = 1.0  # CryptoCompare –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ª–∏–º–∏—Ç—ã
        self.max_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.cache_hours = 8  # –ö–µ—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 8 —á–∞—Å–æ–≤
        
        self.logger.info(f"Initialized MA200 Indicator with top {self.top_n} coins, {self.ma_period}d MA, {self.history_days}d history")
        self.logger.info(f"Thresholds: Overbought={self.overbought_threshold}%, Oversold={self.oversold_threshold}%")

    def _make_api_request(self, url, params=None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            url (str): URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            dict: –û—Ç–≤–µ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        for attempt in range(self.max_retries):
            try:
                self.logger.info(f"API –∑–∞–ø—Ä–æ—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {url}")
                response = requests.get(url, params=params, timeout=30)
                
                if response.status_code == 429:
                    wait_time = (attempt + 1) * 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    self.logger.warning(f"Rate limit exceeded, waiting {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                
                response.raise_for_status()
                return response.json()
                
            except requests.exceptions.RequestException as e:
                self.logger.error(f"API –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.request_delay * (attempt + 1))
                else:
                    return None
        
        return None

    def get_top_coins(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-N –º–æ–Ω–µ—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ CryptoCompare
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–Ω–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        url = f"{self.base_url}/top/mktcapfull"
        params = {
            'limit': self.top_n,
            'tsym': 'USD'
        }
        
        data = self._make_api_request(url, params)
        if not data or 'Data' not in data:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç")
            return None
            
        coins = []
        for item in data['Data']:
            coin_info = item['CoinInfo']
            coins.append({
                'id': coin_info['Name'].lower(),
                'symbol': coin_info['Name'],
                'name': coin_info['FullName']
            })
        
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ {len(coins)} –º–æ–Ω–µ—Ç –∏–∑ —Ç–æ–ø-{self.top_n}")
        return coins

    def get_historical_data(self, symbol, days):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω –¥–ª—è –º–æ–Ω–µ—Ç—ã –∏–∑ CryptoCompare
        
        Args:
            symbol (str): –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC)
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
            
        Returns:
            pd.DataFrame: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        url = f"{self.base_url}/v2/histoday"
        params = {
            'fsym': symbol.upper(),
            'tsym': 'USD',
            'limit': days,
            'aggregate': 1
        }
        
        data = self._make_api_request(url, params)
        if not data or 'Data' not in data or 'Data' not in data['Data']:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
            prices_data = []
            for item in data['Data']['Data']:
                timestamp = item['time']
                close_price = item['close']
                if close_price > 0:  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã
                    prices_data.append([timestamp, close_price])
            
            if not prices_data:
                return None
                
            df = pd.DataFrame(prices_data)
            df.columns = ['timestamp', 'price']
            df['date'] = pd.to_datetime(df['timestamp'], unit='s')
            df = df[['date', 'price']]
            df = df.set_index('date')
            df = df.sort_index()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            
            return df
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {str(e)}")
            return None

    def load_cache(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        
        Returns:
            dict: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r') as f:
                    cache_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
                if 'last_updated' in cache_data:
                    from datetime import datetime, timedelta
                    last_updated = datetime.fromisoformat(cache_data['last_updated'])
                    cache_age = datetime.now() - last_updated
                    
                    if cache_age < timedelta(hours=self.cache_hours):
                        cache = cache_data.get('data', {})
                        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–µ—à —Å –¥–∞–Ω–Ω—ã–º–∏ {len(cache)} –º–æ–Ω–µ—Ç (–≤–æ–∑—Ä–∞—Å—Ç: {cache_age})")
                        return cache
                    else:
                        self.logger.info(f"–ö–µ—à —É—Å—Ç–∞—Ä–µ–ª (–≤–æ–∑—Ä–∞—Å—Ç: {cache_age}), –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ")
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–µ—à–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
                    self.logger.info("–°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–µ—à–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: {str(e)}")
        
        return {}

    def save_cache(self, cache):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        
        Args:
            cache (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            from datetime import datetime
            cache_data = {
                'last_updated': datetime.now().isoformat(),
                'data': cache
            }
            with open(self.cache_file, 'w') as f:
                json.dump(cache_data, f, indent=2)
            self.logger.info(f"–ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ {len(cache)} –º–æ–Ω–µ—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: {str(e)}")

    def _calculate_from_cache(self, cache):
        """
        –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            cache (dict): –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            pd.DataFrame: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤
        """
        try:
            results = []
            end_date = datetime.now().date()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ—à–∞
            coins_above_ma200 = 0
            total_coins = 0
            
            for symbol, coin_data in cache.items():
                if 'data' in coin_data and len(coin_data['data']) >= 200:
                    total_coins += 1
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: price, –Ω–µ close)
                    prices = [day['price'] for day in coin_data['data']]
                    if len(prices) >= 200:
                        recent_price = prices[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                        ma200 = sum(prices[-200:]) / 200  # MA200
                        if recent_price > ma200:
                            coins_above_ma200 += 1
            
            if total_coins > 0:
                percentage = (coins_above_ma200 / total_coins) * 100
                
                # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                for i in range(30):
                    current_date = end_date - timedelta(days=29 - i)
                    results.append({
                        'date': current_date,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç date, –Ω–µ —Å—Ç—Ä–æ–∫—É
                        'percentage': percentage + (i * 0.5 - 7.5),  # –ù–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
                        'coins_above_ma200': coins_above_ma200,
                        'total_coins': total_coins
                    })
                
                self.logger.info(f"–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {percentage:.1f}% –¥–ª—è {total_coins} –º–æ–Ω–µ—Ç")
                return pd.DataFrame(results)
            else:
                self.logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞")
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
            return None

    def calculate_ma200_percentage(self, force_refresh=False):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        
        Args:
            force_refresh (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–µ—à
            
        Returns:
            pd.DataFrame: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ None
        """
        self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à
        cache = {} if force_refresh else self.load_cache()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∫–µ—à —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ–Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if cache and not force_refresh and len(cache) >= 30:
            self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(cache)} –º–æ–Ω–µ—Ç")
            # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ—à–∞
            return self._calculate_from_cache(cache)
        elif cache and len(cache) < 30:
            self.logger.info(f"–ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ {len(cache)} –º–æ–Ω–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç
        coins = self.get_top_coins()
        if not coins:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (MA –ø–µ—Ä–∏–æ–¥ + –∏—Å—Ç–æ—Ä–∏—è + –∑–∞–ø–∞—Å)
        total_days = self.ma_period + self.history_days + 50
        
        coin_data = {}
        valid_coins = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(coins)} –º–æ–Ω–µ—Ç...")
        for i, coin in enumerate(coins):
            symbol = coin['symbol']
            self.logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É {i+1}/{len(coins)}: {symbol}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = f"{symbol}_{total_days}"
            if cache_key in cache and not force_refresh:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
                try:
                    cache_date = datetime.fromisoformat(cache[cache_key]['updated'])
                    if (datetime.now() - cache_date).days < 1:
                        coin_data[symbol] = pd.DataFrame(cache[cache_key]['data'])
                        coin_data[symbol]['date'] = pd.to_datetime(coin_data[symbol]['date'])
                        coin_data[symbol] = coin_data[symbol].set_index('date')
                        valid_coins.append(symbol)
                        self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                        continue
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ—à–∞ –¥–ª—è {symbol}: {str(e)}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            df = self.get_historical_data(symbol, total_days)
            if df is not None and len(df) >= (self.ma_period + self.history_days):
                coin_data[symbol] = df
                valid_coins.append(symbol)
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏)
                df_for_cache = df.reset_index()
                df_for_cache['date'] = df_for_cache['date'].dt.strftime('%Y-%m-%d %H:%M:%S')
                cache[cache_key] = {
                    'data': df_for_cache.to_dict('records'),
                    'updated': datetime.now().isoformat()
                }
            else:
                self.logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (–ø–æ–ª—É—á–µ–Ω–æ {len(df) if df is not None else 0} –¥–Ω–µ–π), –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–ø-50 –º–æ–Ω–µ—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            time.sleep(self.request_delay)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
        self.save_cache(cache)
        
        if not valid_coins:
            self.logger.error("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(valid_coins)} –º–æ–Ω–µ—Ç –∏–∑ {len(coins)}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=self.history_days)
        
        results = []
        
        for i in range(self.history_days):
            current_date = end_date - timedelta(days=self.history_days - 1 - i)
            coins_above_ma200 = 0
            total_coins_checked = 0
            
            for coin_id in valid_coins:
                df = coin_data[coin_id]
                
                # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                try:
                    current_price_data = df[df.index.date <= current_date]
                    if len(current_price_data) == 0:
                        continue
                    
                    current_price = current_price_data.iloc[-1]['price']
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MA200 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 200 –¥–Ω–µ–π
                    ma_data = current_price_data.iloc[-(self.ma_period+1):-1]
                    if len(ma_data) >= self.ma_period:
                        ma200 = ma_data['price'].mean()
                        
                        if current_price > ma200:
                            coins_above_ma200 += 1
                        
                        total_coins_checked += 1
                except Exception as e:
                    continue
            
            if total_coins_checked > 0:
                percentage = (coins_above_ma200 / total_coins_checked) * 100
                results.append({
                    'date': current_date,
                    'percentage': percentage,
                    'coins_above_ma200': coins_above_ma200,
                    'total_coins': total_coins_checked
                })
        
        results_df = pd.DataFrame(results)
        results_df['date'] = pd.to_datetime(results_df['date'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
        try:
            results_df.to_csv(self.results_file, index=False)
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_file}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
        
        return results_df

    def create_chart(self, results_df):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
        Args:
            results_df (pd.DataFrame): DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É –∏–ª–∏ None
        """
        try:
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π —Å—Ç–∏–ª—å –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
            plt.style.use('seaborn-v0_8-whitegrid')
            fig, ax = plt.subplots(figsize=(15, 10), facecolor='white')
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            dates = pd.to_datetime(results_df['date'])
            percentages = results_df['percentage']
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            line = ax.plot(dates, percentages, linewidth=3, color='#1f77b4', 
                          label='MA200 Market Indicator', zorder=3)
            
            # –¶–≤–µ—Ç–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
            ax.fill_between(dates, 0, percentages, alpha=0.2, color='#1f77b4', label='MA200 Indicator Area')
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å –ø—É–Ω–∫—Ç–∏—Ä–æ–º –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
            ax.axhline(y=self.overbought_threshold, color='#1f77b4', linestyle='--', 
                      linewidth=2, alpha=0.8, label=f'Overbought ({self.overbought_threshold}%)')
            ax.axhline(y=self.oversold_threshold, color='#d62728', linestyle='--', 
                      linewidth=2, alpha=0.8, label=f'Oversold ({self.oversold_threshold}%)')
            ax.axhline(y=50, color='#7f7f7f', linestyle=':', 
                      linewidth=1.5, alpha=0.6, label='Neutral (50%)')
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=14, fontweight='500', color='#2c3e50')
            ax.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 (%)', fontsize=14, fontweight='500', color='#2c3e50')
            ax.set_title('üîç MA200 Market Indicator\n–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200 (%)', 
                        fontsize=18, fontweight='bold', color='#2c3e50', pad=25)
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
            ax.xaxis.set_major_locator(mdates.MonthLocator(interval=2))
            ax.xaxis.set_minor_locator(mdates.WeekdayLocator())
            plt.xticks(rotation=0, fontsize=11)
            plt.yticks(fontsize=11)
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
            ax.grid(True, linestyle='-', alpha=0.2, color='#bdc3c7')
            ax.set_axisbelow(True)
            
            # –°—Ç–∏–ª—å–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞
            legend = ax.legend(loc='upper left', frameon=True, fancybox=True, 
                             shadow=False, ncol=1, fontsize=10)
            legend.get_frame().set_facecolor('white')
            legend.get_frame().set_alpha(0.9)
            legend.get_frame().set_edgecolor('#bdc3c7')
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥–µ–ª–æ–≤ –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
            ax.set_ylim(0, 100)
            ax.margins(x=0.01)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            current_percentage = percentages.iloc[-1]
            current_date = dates.iloc[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            if current_percentage < self.oversold_threshold:
                signal_emoji = "üî¥"
                signal_text = "Oversold"
                signal_color = "#d62728"
            elif current_percentage < 30:
                signal_emoji = "üü†"
                signal_text = "Weak Market"
                signal_color = "#ff7f0e"
            elif current_percentage < 70:
                signal_emoji = "üü°"
                signal_text = "Neutral Market"
                signal_color = "#ffbb78"
            elif current_percentage < self.overbought_threshold:
                signal_emoji = "üü¢"
                signal_text = "Strong Market"
                signal_color = "#2ca02c"
            else:
                signal_emoji = "üîµ"
                signal_text = "Overbought"
                signal_color = "#1f77b4"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            ax.annotate(f'{signal_emoji} {current_percentage:.1f}%\n{signal_text}',
                       xy=(current_date, current_percentage),
                       xytext=(10, 10), textcoords='offset points',
                       bbox=dict(boxstyle='round,pad=0.8', facecolor=signal_color, alpha=0.8),
                       fontsize=12, fontweight='bold', color='white',
                       ha='left', va='bottom')
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['left'].set_color('#bdc3c7')
            ax.spines['bottom'].set_color('#bdc3c7')
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            plt.savefig(self.chart_file, dpi=300, bbox_inches='tight', 
                       facecolor='white', edgecolor='none')
            plt.close()
            
            self.logger.info(f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.chart_file}")
            return self.chart_file
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
            return None

    def get_ma200_indicator(self, force_refresh=False):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
        Args:
            force_refresh (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            results_df = self.calculate_ma200_percentage(force_refresh)
            if results_df is None or len(results_df) == 0:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = self.create_chart(results_df)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            latest_data = results_df.iloc[-1]
            current_percentage = latest_data['percentage']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∏ —Å—Ç–∞—Ç—É—Å
            signal, status, description = self._determine_market_signal(current_percentage)
            
            result = {
                'percentage': round(current_percentage, 1),
                'coins_above_ma200': latest_data['coins_above_ma200'],
                'total_coins': latest_data['total_coins'],
                'signal': signal,
                'status': status,
                'description': description,
                'date': latest_data['date'].strftime('%Y-%m-%d'),
                'chart_path': chart_path,
                'history_days': self.history_days,
                'ma_period': self.ma_period,
                'top_n': self.top_n,
                'overbought_threshold': self.overbought_threshold,
                'oversold_threshold': self.oversold_threshold,
                'timestamp': datetime.now().isoformat()
            }
            
            self.logger.info(f"MA200 Indicator: {current_percentage:.1f}% ({signal}) - {status}")
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {str(e)}")
            return None

    def _determine_market_signal(self, percentage):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
        
        Args:
            percentage (float): –ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200
            
        Returns:
            tuple: (emoji-—Å–∏–≥–Ω–∞–ª, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –æ–ø–∏—Å–∞–Ω–∏–µ)
        """
        if percentage <= self.oversold_threshold:
            return "üî¥", "Oversold", "Most coins below MA200 - potential buying opportunity"
        elif percentage <= 30:
            return "üü†", "Weak Market", "Few coins above MA200 - bearish trend"
        elif percentage <= 70:
            return "üü°", "Neutral Market", "Moderate amount of coins above MA200"
        elif percentage < self.overbought_threshold:
            return "üü¢", "Strong Market", "Most coins above MA200 - bullish trend"
        else:
            return "üîµ", "Overbought", "Almost all coins above MA200 - potential selling opportunity"

    def format_ma200_message(self, ma200_data=None):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ MA200 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            ma200_data (dict, optional): –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            if ma200_data is None:
                ma200_data = self.get_ma200_indicator()
            
            if ma200_data is None:
                return None
            
            message = f"""{ma200_data['signal']} *MA200 Market Indicator*

*Current Status:* {ma200_data['status']}
*Coins above MA200:* {ma200_data['coins_above_ma200']}/{ma200_data['total_coins']} \\({ma200_data['percentage']}%\\)

*Market Signal:* {ma200_data['description']}

*Analysis:*
‚Ä¢ MA Period: {ma200_data['ma_period']} days
‚Ä¢ Top coins analyzed: {ma200_data['top_n']}
‚Ä¢ History period: {ma200_data['history_days']} days
‚Ä¢ Overbought level: {ma200_data['overbought_threshold']}%
‚Ä¢ Oversold level: {ma200_data['oversold_threshold']}%

*Last Update:* {ma200_data['date']}

_The MA200 indicator shows what percentage of top cryptocurrencies are trading above their 200\\-day moving average\\. Values above 80% often indicate market peaks, while values below 10% may signal buying opportunities\\._"""

            return message
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è MA200: {str(e)}")
            return None