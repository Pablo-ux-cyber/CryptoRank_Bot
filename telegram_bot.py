import asyncio
import io
import base64
from telegram import Bot
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID
from logger import logger

class TelegramBot:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API (–≤–µ—Ä—Å–∏—è 20.x)
    
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ API –∏ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.token = TELEGRAM_BOT_TOKEN
        self.channel_id = TELEGRAM_CHANNEL_ID
        self.bot = None
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∫–∞–Ω–∞–ª–∞
        if not self.token:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN.")
        
        if not self.channel_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_CHANNEL_ID.")
            logger.info("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: TELEGRAM_CHANNEL_ID –º–æ–∂–µ—Ç –±—ã—Ç—å @channel_name –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        self.bot = Bot(token=self.token)
        logger.info("Telegram bot initialized successfully")
    
    def _escape_markdown_v2(self, text):
        """
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ MarkdownV2
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –≠–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        emojis = ["üîº", "üîΩ", "üü¢", "üü°", "‚ö™", "üî¥", "üîµ"]
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã
        for i, emoji in enumerate(emojis):
            text = text.replace(emoji, f"__EMOJI_{i}__")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in special_chars:
            text = text.replace(char, f"\\{char}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –º–µ—Å—Ç–æ
        for i, emoji in enumerate(emojis):
            text = text.replace(f"__EMOJI_{i}__", emoji)
            
        return text
    
    def _get_event_loop(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç
        
        Returns:
            asyncio.AbstractEventLoop: –ê–∫—Ç–∏–≤–Ω—ã–π event loop
        """
        try:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
                loop = asyncio.get_event_loop()
                if loop.is_closed():
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π loop –∑–∞–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    logger.debug("–¢–µ–∫—É—â–∏–π event loop –∑–∞–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
            except RuntimeError:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                logger.debug("Event loop –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
            return loop
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ event loop: {str(e)}")
            return None
    
    def send_message(self, message):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É Telegram
        
        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        async def _send_async():
            if not self.bot:
                logger.error("Telegram bot not initialized")
                return False
                
            try:
                chat_id = self.channel_id
                
                # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞: –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
                chat_type = "–∫–∞–Ω–∞–ª" if chat_id.startswith('@') else "–≥—Ä—É–ø–ø–∞"
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å—Å—ã–ª–æ–∫
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram {chat_type}")
                    return True
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    
                    try:
                        # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ª—é–±—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏
                        clean_text = message.replace('\\', '')
                        clean_text = clean_text.replace('*', '')
                        clean_text = clean_text.replace('||', '')
                        clean_text = clean_text.replace('#', '')
                        clean_text = clean_text.replace('_', '')
                        
                        await self.bot.send_message(
                            chat_id=chat_id,
                            text=clean_text,
                            parse_mode=None,
                            disable_web_page_preview=True
                        )
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram {chat_type} (–æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)")
                        return True
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
                        return False
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
                return False

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∏–ª–∏ –Ω–æ–≤–æ–º event loop
        loop = self._get_event_loop()
        if not loop:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å event loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
            
        try:
            return loop.run_until_complete(_send_async())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}")
            return False
    
    def test_connection(self):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        async def _test_async():
            try:
                if not self.bot:
                    logger.error("Telegram bot not initialized")
                    return False
                
                me = await self.bot.get_me()
                logger.info(f"Connected to Telegram as @{me.username}")
                return True
                
            except Exception as e:
                logger.error(f"Failed to connect to Telegram: {str(e)}")
                return False
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∏–ª–∏ –Ω–æ–≤–æ–º event loop
        loop = self._get_event_loop()
        if not loop:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å event loop –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            return False
            
        try:
            return loop.run_until_complete(_test_async())
        except Exception as e:
            logger.error(f"Error in async execution: {str(e)}")
            return False
    
    def send_photo(self, image_data, caption=None):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É Telegram
        
        Args:
            image_data (bytes): –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
            caption (str, optional): –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        async def _send_photo_async():
            if not self.bot:
                logger.error("Telegram bot not initialized")
                return False
                
            try:
                chat_id = self.channel_id
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–π—Ç–æ–≤
                photo_file = io.BytesIO(image_data)
                photo_file.name = 'market_chart.png'
                
                await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_file,
                    caption=caption,
                    parse_mode=None
                )
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram: {str(e)}")
                return False

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∏–ª–∏ –Ω–æ–≤–æ–º event loop
        loop = self._get_event_loop()
        if not loop:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å event loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return False
            
        try:
            return loop.run_until_complete(_send_photo_async())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return False

    def send_photo_url(self, photo_url, caption=None):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É Telegram
        
        Args:
            photo_url (str): URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            caption (str, optional): –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        async def _send_photo_url_async():
            if not self.bot:
                logger.error("Telegram bot not initialized")
                return False
                
            try:
                chat_id = self.channel_id
                
                await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_url,
                    caption=caption,
                    parse_mode=None
                )
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL –≤ Telegram: {str(e)}")
                return False

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∏–ª–∏ –Ω–æ–≤–æ–º event loop
        loop = self._get_event_loop()
        if not loop:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å event loop –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL")
            return False
            
        try:
            return loop.run_until_complete(_send_photo_url_async())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {str(e)}")
            return False