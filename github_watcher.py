import time
from datetime import datetime, timedelta
from github import Github, RateLimitExceededException, BadCredentialsException
from logger import logger

class GitHubWatcher:
    def __init__(self, access_token=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub
        
        Args:
            access_token (str, optional): –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ GitHub –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ API
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç GitHub (—Å —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ –±–µ–∑)
            if access_token:
                self.github = Github(access_token)
                self.using_auth = True
                logger.info("GitHub API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
            else:
                self.github = Github()
                self.using_auth = False
                logger.info("GitHub API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
            rate_limit = self.github.get_rate_limit()
            logger.info(f"–õ–∏–º–∏—Ç API GitHub: {rate_limit.core.remaining}/{rate_limit.core.limit} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            # –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –Ω–∞—Å –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
            self.crypto_repos = [
                "bitcoin/bitcoin",
                "ethereum/go-ethereum",
                "solana-labs/solana",
                "cosmos/cosmos-sdk",
                "binance-chain/bsc",
                "cardano-foundation/cardano-wallet"
            ]
        except BadCredentialsException:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ GitHub")
            self.github = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GitHub API: {str(e)}")
            self.github = None
    
    def get_repo_activity(self, repo_path, days=7):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        
        Args:
            repo_path (str): –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'organization/repo'
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.github:
            return None
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            repo = self.github.get_repo(repo_path)
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            repo_info = {
                "name": repo.name,
                "full_name": repo.full_name,
                "stars": repo.stargazers_count,
                "forks": repo.forks_count,
                "open_issues": repo.open_issues_count,
                "watchers": repo.subscribers_count,
                "updated_at": repo.updated_at.strftime("%Y-%m-%d %H:%M:%S"),
                "days_analyzed": days
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ–º –∫–æ–º–º–∏—Ç—ã
            since_date = datetime.now() - timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            commits = list(repo.get_commits(since=since_date))
            repo_info["commits_count"] = len(commits)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –≤ –¥–µ–Ω—å
            if days > 0:
                repo_info["avg_commits_per_day"] = round(repo_info["commits_count"] / days, 2)
            else:
                repo_info["avg_commits_per_day"] = 0
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∫–æ–º–º–∏—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–∏—Ç—ã
            if commits:
                repo_info["last_commit_date"] = commits[0].commit.author.date.strftime("%Y-%m-%d %H:%M:%S")
            else:
                repo_info["last_commit_date"] = "No recent commits"
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            repo_info["url"] = repo.html_url
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo_path}: {repo_info['commits_count']} –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if repo_info["avg_commits_per_day"] >= 10:
                repo_info["activity_level"] = "Very High"
                repo_info["activity_emoji"] = "üî•"
            elif repo_info["avg_commits_per_day"] >= 5:
                repo_info["activity_level"] = "High"
                repo_info["activity_emoji"] = "üìà"
            elif repo_info["avg_commits_per_day"] >= 1:
                repo_info["activity_level"] = "Moderate"
                repo_info["activity_emoji"] = "üìä"
            elif repo_info["avg_commits_per_day"] > 0:
                repo_info["activity_level"] = "Low"
                repo_info["activity_emoji"] = "üìâ"
            else:
                repo_info["activity_level"] = "Inactive"
                repo_info["activity_emoji"] = "üí§"
                
            return repo_info
            
        except RateLimitExceededException:
            rate_limit = self.github.get_rate_limit()
            reset_time = rate_limit.core.reset.strftime("%Y-%m-%d %H:%M:%S")
            logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ GitHub API. –°–±—Ä–æ—Å –≤ {reset_time}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_path}: {str(e)}")
            return None
    
    def get_all_repos_activity(self, days=7):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        
        Args:
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
        """
        all_activity = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "days_analyzed": days,
            "repos": []
        }
        
        total_commits = 0
        total_stars = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
        for repo_path in self.crypto_repos:
            # –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –¥–æ—Å—Ç–∏—á—å –ª–∏–º–∏—Ç–∞ API
            time.sleep(1)
            
            repo_activity = self.get_repo_activity(repo_path, days)
            
            if repo_activity:
                all_activity["repos"].append(repo_activity)
                total_commits += repo_activity.get("commits_count", 0)
                total_stars += repo_activity.get("stars", 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_activity["total_commits"] = total_commits
        all_activity["total_stars"] = total_stars
        all_activity["avg_commits_per_repo"] = round(total_commits / len(all_activity["repos"]), 2) if all_activity["repos"] else 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
        avg_commits_per_day_per_repo = all_activity["avg_commits_per_repo"] / days if days > 0 else 0
        
        if avg_commits_per_day_per_repo >= 10:
            all_activity["ecosystem_activity"] = "Very High"
            all_activity["ecosystem_emoji"] = "üî•"
        elif avg_commits_per_day_per_repo >= 5:
            all_activity["ecosystem_activity"] = "High"
            all_activity["ecosystem_emoji"] = "üìà"
        elif avg_commits_per_day_per_repo >= 1:
            all_activity["ecosystem_activity"] = "Moderate"
            all_activity["ecosystem_emoji"] = "üìä"
        elif avg_commits_per_day_per_repo > 0:
            all_activity["ecosystem_activity"] = "Low"
            all_activity["ecosystem_emoji"] = "üìâ"
        else:
            all_activity["ecosystem_activity"] = "Inactive"
            all_activity["ecosystem_emoji"] = "üí§"
        
        return all_activity
    
    def format_github_message(self, github_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ GitHub –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
        
        Args:
            github_data (dict): –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –º–µ—Ç–æ–¥–∞ get_all_repos_activity
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        if not github_data or "repos" not in github_data or not github_data["repos"]:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ GitHub –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message = f"üîç *GitHub Activity Pulse*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
        ecosystem_emoji = github_data.get("ecosystem_emoji", "‚ùì")
        ecosystem_activity = github_data.get("ecosystem_activity", "Unknown")
        days = github_data.get("days_analyzed", 7)
        
        message += f"{ecosystem_emoji} *Ecosystem Activity:* {ecosystem_activity}\n"
        message += f"üìà *Total commits (last {days} days):* {github_data.get('total_commits', 0)}\n"
        message += f"‚≠ê *Total stars:* {github_data.get('total_stars', 0)}\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_repos = sorted(
            github_data["repos"], 
            key=lambda r: r.get("commits_count", 0), 
            reverse=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        message += "*Repository Activity:*\n"
        
        for repo in sorted_repos:
            repo_name = repo.get("full_name", "Unknown")
            commits = repo.get("commits_count", 0)
            stars = repo.get("stars", 0)
            activity_emoji = repo.get("activity_emoji", "‚ùì")
            
            message += f"{activity_emoji} *{repo_name}*: {commits} commits, {stars} stars\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        timestamp = github_data.get("timestamp", "N/A")
        message += f"\nüïê *Updated:* {timestamp}"
        
        return message