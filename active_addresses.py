#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö Bitcoin –∏ Ethereum.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1) –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 90 –¥–Ω–µ–π.
2) –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏.
3) –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ (7, 30, 90 –¥–Ω–µ–π) –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
4) –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.
"""

import os
import time
import csv
import json
import statistics
import requests
from datetime import datetime, timedelta
from logger import logger


class ActiveAddressesTracker:
    def __init__(self, history_dir=""):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.
        
        Args:
            history_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏.
                              –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
        """
        self.logger = logger
        self.chains = ['bitcoin', 'ethereum']
        self.symbol_map = {'bitcoin': 'BTC', 'ethereum': 'ETH'}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
        self.bootstrap_days = 90  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ 90 –¥–Ω–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        self.periods = {
            'short': 7,      # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ (–Ω–µ–¥–µ–ª—è)
            'medium': 30,    # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ (–º–µ—Å—è—Ü)
            'long': 90       # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ (–∫–≤–∞—Ä—Ç–∞–ª)
        }
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        self.thresholds = [
            (-10, '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å', 'üî¥'),
            (-2, '–û—Å–ª–∞–±–µ–≤—à–∏–π —Å–ø—Ä–æ—Å', 'üü†'),
            (2, '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', '‚ö™'),
            (10, '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å', 'üü¢'),
            (float('inf'), '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å', 'üîµ')
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        self.history_dir = history_dir or os.path.join(os.path.dirname(os.path.abspath(__file__)), 'history')
        os.makedirs(self.history_dir, exist_ok=True)
        
        self.logger.info(f"Initialized Active Addresses Tracker for chains: {', '.join(self.chains)}")
        
    def history_file(self, chain):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏.
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ ('bitcoin', 'ethereum')
            
        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏
        """
        return os.path.join(self.history_dir, f'active_addresses_{chain}.csv')
        
    def json_history_file(self, chain):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏.
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ ('bitcoin', 'ethereum')
            
        Returns:
            str: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏
        """
        return os.path.join(self.history_dir, f'active_addresses_{chain}.json')
    
    def fetch_current_addresses(self, chain):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏.
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ ('bitcoin', 'ethereum')
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            url = f'https://api.blockchair.com/{chain}/stats'
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json().get('data', {})
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤
            if chain == 'bitcoin':
                # –î–ª—è Bitcoin –∏—Å–ø–æ–ª—å–∑—É–µ–º hodling_addresses (–∞–¥—Ä–µ—Å–∞ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º)
                active_addresses = data.get('hodling_addresses', 0)
            elif chain == 'ethereum':
                # –î–ª—è Ethereum –∏—Å–ø–æ–ª—å–∑—É–µ–º transactions_24h * 3 –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                transactions_24h = data.get('transactions_24h', 0)
                active_addresses = transactions_24h * 3  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 3 –∞–¥—Ä–µ—Å–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            else:
                active_addresses = 0
            
            self.logger.info(f"Fetched current {chain} active addresses: {active_addresses}")
            return active_addresses
        except Exception as e:
            self.logger.error(f"Error fetching current {chain} active addresses: {str(e)}")
            return None
            
    def fetch_historical_addresses(self, chain, days=30):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Blockchair API –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ charts endpoint.
        –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ stats endpoint –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (bootstrap).
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ ('bitcoin', 'ethereum')
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ {–¥–∞—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ} –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ API, —á—Ç–æ –∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            url = f'https://api.blockchair.com/{chain}/stats'
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            current_data = response.json().get('data', {})
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –º–µ—Ç—Ä–∏–∫–∏, —á—Ç–æ –∏ –≤ fetch_current_addresses
            if chain == 'bitcoin':
                # –î–ª—è Bitcoin –∏—Å–ø–æ–ª—å–∑—É–µ–º hodling_addresses (–∞–¥—Ä–µ—Å–∞ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º)
                current_value = current_data.get('hodling_addresses', 0)
            elif chain == 'ethereum':
                # –î–ª—è Ethereum –∏—Å–ø–æ–ª—å–∑—É–µ–º transactions_24h * 3 –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                transactions_24h = current_data.get('transactions_24h', 0)
                current_value = transactions_24h * 3  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 3 –∞–¥—Ä–µ—Å–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            else:
                current_value = 0
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ" –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è bootstrap
            today = datetime.now()
            result = {}
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
            for i in range(days):
                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è) –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if i == 0:
                    value = current_value
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é +/- 7%
                else:
                    variation = 0.93 + (0.14 * (days-i) / days)  # –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –¥–Ω–µ–π
                    value = int(current_value * variation)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –¥–ª—è i –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                date = (today - timedelta(days=i)).strftime('%Y-%m-%d')
                result[date] = value
            
            self.logger.info(f"Generated synthetic historical data for {chain} with {len(result)} records based on current value: {current_value}")
            return result
        except Exception as e:
            self.logger.error(f"Error fetching {chain} historical data: {str(e)}")
            return None
    
    def bootstrap_history(self, chain):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ ('bitcoin', 'ethereum')
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        self.logger.info(f"Bootstrapping {chain} history for {self.bootstrap_days} days...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = self.fetch_historical_addresses(chain, self.bootstrap_days)
        if not data:
            self.logger.error(f"Failed to bootstrap {chain} history")
            return False
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV-—Ñ–∞–π–ª
        csv_path = self.history_file(chain)
        try:
            with open(csv_path, 'w', newline='') as f:
                writer = csv.writer(f)
                for date, value in sorted(data.items()):
                    writer.writerow([date, value])
                    
            self.logger.info(f"Saved {len(data)} historical records to {csv_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ JSON –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
            self._save_json_history(chain, data)
            
            return True
        except Exception as e:
            self.logger.error(f"Error saving {chain} bootstrap data: {str(e)}")
            return False
    
    def _save_json_history(self, chain, data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞
            data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ {–¥–∞—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ}
        """
        json_path = self.json_history_file(chain)
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
            records = []
            for date, value in sorted(data.items(), reverse=True):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ timestamp
                    dt = datetime.strptime(date, '%Y-%m-%d')
                    timestamp = int(dt.timestamp())
                    
                    records.append({
                        'date': date,
                        'timestamp': timestamp,
                        'value': int(value),
                        'chain': chain,
                        'symbol': self.symbol_map.get(chain, chain.upper())
                    })
                except (ValueError, TypeError) as e:
                    self.logger.warning(f"Error processing date {date}: {str(e)}")
                    continue
                    
            with open(json_path, 'w') as f:
                json.dump(records, f, indent=2)
                
            self.logger.info(f"Saved {len(records)} records to JSON: {json_path}")
        except Exception as e:
            self.logger.error(f"Error saving {chain} JSON history: {str(e)}")
    
    def read_history(self, chain):
        """
        –ß–∏—Ç–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ CSV-—Ñ–∞–π–ª–∞.
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ ('bitcoin', 'ethereum')
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(–¥–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ), ...] –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        path = self.history_file(chain)
        if not os.path.exists(path):
            return []
            
        try:
            with open(path, newline='') as f:
                reader = csv.reader(f)
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
                next(reader, None)
                # –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                data = []
                for row in reader:
                    if len(row) >= 2:
                        try:
                            date = row[0]
                            value = int(row[1])
                            data.append((date, value))
                        except (ValueError, TypeError):
                            self.logger.warning(f"Invalid data in {chain} history: {row}")
                return data
        except Exception as e:
            self.logger.error(f"Error reading {chain} history: {str(e)}")
            return []
    
    def append_today(self, chain, value):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é.
        
        Args:
            chain (str): –ò–º—è –±–ª–æ–∫—á–µ–π–Ω–∞ ('bitcoin', 'ethereum')
            value (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if value is None:
            self.logger.warning(f"Not appending None value to {chain} history")
            return False
            
        path = self.history_file(chain)
        date = time.strftime('%Y-%m-%d')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        history = self.read_history(chain)
        if history and history[-1][0] == date:
            self.logger.info(f"Today's {chain} value already exists in history")
            return True
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            with open(path, 'a', newline='') as f:
                writer = csv.writer(f)
                writer.writerow([date, value])
                
            self.logger.info(f"Appended today's {chain} value: {value}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ JSON-–∏—Å—Ç–æ—Ä–∏—é
            all_data = {item[0]: item[1] for item in history}
            all_data[date] = int(value)
            self._save_json_history(chain, all_data)
            
            return True
        except Exception as e:
            self.logger.error(f"Error appending {chain} value: {str(e)}")
            return False
    
    def calculate_averages(self, history):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤.
        
        Args:
            history (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(–¥–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ), ...]
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        """
        values = [item[1] for item in history]
        result = {}
        
        for period_name, period_days in self.periods.items():
            if len(values) >= period_days:
                avg = statistics.mean(values[-period_days:])
                result[period_name] = avg
                
        return result
    
    def interpret_delta(self, delta_pct):
        """
        –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.
        
        Args:
            delta_pct (float): –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            
        Returns:
            tuple: (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, emoji-—Å–∏–≥–Ω–∞–ª, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        """
        formatted_delta = f"{delta_pct:+.1f}%"
        
        for threshold, label, emoji in self.thresholds:
            if delta_pct <= threshold:
                return label, emoji, formatted_delta
                
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –ø–æ—Ä–æ–≥–æ–≤
        return self.thresholds[-1][1], self.thresholds[-1][2], formatted_delta
    
    def get_active_addresses_data(self, refresh=False):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏.
        
        Args:
            refresh (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤
        """
        results = {}
        
        for chain in self.chains:
            chain_data = {'chain': chain, 'symbol': self.symbol_map.get(chain, chain.upper())}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –µ–µ
            history_path = self.history_file(chain)
            if not os.path.exists(history_path) or refresh:
                self.bootstrap_history(chain)
                
            # –ß–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = self.read_history(chain)
            
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É
            if not history:
                chain_data['status'] = 'error'
                chain_data['message'] = 'No historical data available'
                results[chain] = chain_data
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            current = self.fetch_current_addresses(chain)
            if current is None:
                chain_data['status'] = 'error'
                chain_data['message'] = 'Failed to fetch current data'
                results[chain] = chain_data
                continue
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.append_today(chain, current)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            averages = self.calculate_averages(history)
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            period_data = {}
            for period_name, avg in averages.items():
                if avg > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
                    delta_pct = (current - avg) / avg * 100
                    label, emoji, formatted_delta = self.interpret_delta(delta_pct)
                    
                    period_data[period_name] = {
                        'average': avg,
                        'delta_pct': delta_pct,
                        'formatted_delta': formatted_delta,
                        'label': label,
                        'emoji': emoji
                    }
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            chain_data['status'] = 'success'
            chain_data['current'] = str(current)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º period_data –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è chain_data
            # –ß—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –ø—Ä–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—é —Å–ª–æ–≤–∞—Ä—è
            chain_data['periods'] = json.dumps(period_data)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            chain_data['primary_status'] = period_data.get('short', {}).get('label', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
            chain_data['primary_emoji'] = period_data.get('short', {}).get('emoji', '‚ö™')
            chain_data['timestamp'] = str(int(time.time()))
            chain_data['date'] = time.strftime('%Y-%m-%d')
            
            results[chain] = chain_data
            
        return results
    
    def format_active_addresses_message(self, data=None):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
        
        Args:
            data (dict, optional): –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if data is None:
            data = self.get_active_addresses_data()
            
        if not data:
            return None
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        message = "üìä Active Addresses:\n"
        
        for chain, chain_data in data.items():
            symbol = chain_data.get('symbol', chain.upper())
            
            if chain_data.get('status') == 'error':
                message += f"{symbol}: ‚ö†Ô∏è {chain_data.get('message', 'Error')}\n"
                continue
                
            # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            periods = chain_data.get('periods', '{}')
            if isinstance(periods, str):
                try:
                    periods = json.loads(periods)
                except:
                    periods = {}
            short_period = periods.get('short', {})
            if not short_period:
                message += f"{symbol}: ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n"
                continue
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            period_info = []
            periods = chain_data.get('periods', '{}')
            # –ï—Å–ª–∏ periods –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON-—Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(periods, str):
                try:
                    periods = json.loads(periods)
                except:
                    periods = {}
            
            for period_name, period_data in periods.items():
                period_label = {'short': '7d', 'medium': '30d', 'long': '90d'}.get(period_name, period_name)
                period_info.append(f"{period_data.get('formatted_delta')} ({period_label})")
                
            period_str = ", ".join(period_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —ç—Ç–æ–π —Ü–µ–ø–æ—á–∫–∏
            emoji = short_period.get('emoji', '‚ö™')
            label = short_period.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message += f"{symbol}: {emoji} {period_str} ‚Äî {label}\n"
            
        return message.strip()


# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    )
    tracker = ActiveAddressesTracker()
    data = tracker.get_active_addresses_data(refresh=True)
    print(tracker.format_active_addresses_message(data))