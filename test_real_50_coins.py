#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ 200MA –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω—ã—Ö 50 –º–æ–Ω–µ—Ç
–∫–∞–∫ –≤ –∫–Ω–æ–ø–∫–µ "Test Real Message"
"""

import logging
from market_breadth_indicator import MarketBreadthIndicator
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_real_50_coins_data():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ 200MA –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω—ã—Ö 50 –º–æ–Ω–µ—Ç
    –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ "Test Real Message"
    """
    logger.info("–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö 200MA —Å –ø–æ–ª–Ω—ã–º–∏ 50 –º–æ–Ω–µ—Ç–∞–º–∏")
    logger.info("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    indicator = MarketBreadthIndicator()
    
    # –û–¥–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–ª–Ω—ã–º–∏ 50 –º–æ–Ω–µ—Ç–∞–º–∏ (–∫–∞–∫ Test Real Message)
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω—ã–º–∏ 50 –º–æ–Ω–µ—Ç–∞–º–∏...")
    data = indicator.get_market_breadth_data(fast_mode=False)  # 50 –º–æ–Ω–µ—Ç
    
    if data:
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç (50 –º–æ–Ω–µ—Ç): {data['current_value']:.1f}% - {data['condition']}")
        logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: {data['total_coins']}")
        logger.info(f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%H:%M:%S')}")
        return True
    else:
        logger.error("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False

if __name__ == "__main__":
    success = test_real_50_coins_data()
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –î–∞–Ω–Ω—ã–µ —Å 50 –º–æ–Ω–µ—Ç–∞–º–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã –∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å 50 –º–æ–Ω–µ—Ç–∞–º–∏")