#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
"""

import sys
sys.path.insert(0, '/home/runner/workspace')

def test_correct_message():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    print("=== –¢–ï–°–¢ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ê –°–û–û–ë–©–ï–ù–ò–Ø ===")
    
    try:
        from load_dotenv import load_dotenv
        load_dotenv()
        
        from scheduler import SensorTowerScheduler
        scheduler = SensorTowerScheduler()
        
        print("--- –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---")
        
        # 1. –†–µ–π—Ç–∏–Ω–≥
        from json_rank_reader import get_rank_from_json
        current_rank = get_rank_from_json()
        print(f"–†–µ–π—Ç–∏–Ω–≥: {current_rank}")
        
        # 2. Fear & Greed
        fear_greed_data = scheduler.fear_greed_tracker.get_fear_greed_index()
        print(f"Fear & Greed: {fear_greed_data['value'] if fear_greed_data else '–û—à–∏–±–∫–∞'}")
        
        # 3. Market Breadth (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ main.py)
        market_breadth_data = None
        try:
            from main import get_market_breadth_data_no_cache
            result = get_market_breadth_data_no_cache()
            if result and result.get('status') == 'success':
                market_breadth_data = result['data']
                print(f"Market Breadth: {market_breadth_data['signal']} {market_breadth_data['condition']} {market_breadth_data['percentage']}%")
            else:
                print("Market Breadth: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"Market Breadth: –æ—à–∏–±–∫–∞ - {str(e)}")
            market_breadth_data = None
        
        print("\n--- –§–æ—Ä–º–∏—Ä—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ ---")
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        message_parts = []
        
        # 1. Coinbase App Rank (–¢–û–ß–ù–û –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        message_parts.append(f"üîº Coinbase Appstore Rank: {current_rank}")
        
        # 2. Fear & Greed (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        if fear_greed_data:
            fear_greed_message = scheduler.fear_greed_tracker.format_fear_greed_message(fear_greed_data)
            if fear_greed_message:
                message_parts.append(fear_greed_message)
        
        # 3. Market by 200MA (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ —Å–æ —Å—Å—ã–ª–∫–æ–π)
        if market_breadth_data:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
            try:
                from main import create_quick_chart
                from image_uploader import image_uploader
                
                png_data = create_quick_chart()
                if png_data:
                    external_url = image_uploader.upload_chart(png_data)
                    if external_url:
                        # –¢–û–ß–ù–´–ô –§–û–†–ú–ê–¢ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å—Ç—Ä–æ–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
                        market_message = f"[Market by 200MA: {market_breadth_data['signal']} {market_breadth_data['condition']}: {market_breadth_data['percentage']}%]({external_url})"
                        message_parts.append(market_message)
                        print(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {external_url}")
                    else:
                        # –ë–µ–∑ —Å—Å—ã–ª–∫–∏
                        market_message = f"Market by 200MA: {market_breadth_data['signal']} {market_breadth_data['condition']}: {market_breadth_data['percentage']}%"
                        message_parts.append(market_message)
                else:
                    market_message = f"Market by 200MA: {market_breadth_data['signal']} {market_breadth_data['condition']}: {market_breadth_data['percentage']}%"
                    message_parts.append(market_message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
                market_message = f"Market by 200MA: {market_breadth_data['signal']} {market_breadth_data['condition']}: {market_breadth_data['percentage']}%"
                message_parts.append(market_message)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message = "\n\n".join(message_parts)
        
        print(f"\n--- –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ---")
        print(final_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        print(f"\n--- –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ---")
        success = scheduler.telegram_bot.send_message(final_message)
        
        if success:
            print("‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_correct_message()