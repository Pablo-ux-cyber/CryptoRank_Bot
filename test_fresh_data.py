#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ 200MA –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
from market_breadth_indicator import MarketBreadthIndicator
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_fresh_data_loading():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–µ, –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger.info("üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö 200MA")
    logger.info("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    indicator = MarketBreadthIndicator()
    
    # –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    logger.info("üì° –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data1 = indicator.get_market_breadth_data(fast_mode=True)  # 10 –º–æ–Ω–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
    
    if data1:
        logger.info(f"‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {data1['current_value']:.1f}% - {data1['condition']}")
        logger.info(f"üïê –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%H:%M:%S')}")
    else:
        logger.error("‚ùå –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    # –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¢–û–ß–ù–û —Ç–∞–∫–æ–π –∂–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ)
    logger.info("\nüì° –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data2 = indicator.get_market_breadth_data(fast_mode=True)  # 10 –º–æ–Ω–µ—Ç
    
    if data2:
        logger.info(f"‚úÖ –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {data2['current_value']:.1f}% - {data2['condition']}")
        logger.info(f"üïê –í—Ä–µ–º—è –≤—Ç–æ—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%H:%M:%S')}")
    else:
        logger.error("‚ùå –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    logger.info("="*30)
    
    if abs(data1['current_value'] - data2['current_value']) < 0.1:
        logger.info("‚úÖ –£–°–ü–ï–•: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ")
        logger.info(f"   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {abs(data1['current_value'] - data2['current_value']):.3f}%")
        return True
    else:
        logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - –≤–æ–∑–º–æ–∂–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        logger.error(f"   –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {data1['current_value']:.1f}%")
        logger.error(f"   –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {data2['current_value']:.1f}%")
        logger.error(f"   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {abs(data1['current_value'] - data2['current_value']):.3f}%")
        return False

if __name__ == "__main__":
    success = test_fresh_data_loading()
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º")