#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ API –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç
"""
import os
import sys
import requests
import json
from datetime import datetime
import time

def check_api_key_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞"""
    print("–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê API –ö–õ–Æ–ß–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.environ.get('CRYPTOCOMPARE_API_KEY')
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:20]}...")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    try:
        url = "https://min-api.cryptocompare.com/data/v2/histoday"
        params = {
            'fsym': 'BTC',
            'tsym': 'USD',
            'limit': 10,
            'api_key': api_key
        }
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('Response') == 'Success':
                records = len(data.get('Data', {}).get('Data', []))
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {records} –∑–∞–ø–∏—Å–µ–π –¥–ª—è BTC")
                return True
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('Message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_market_breadth_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö Market Breadth"""
    print("\n–¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò MARKET BREADTH")
    print("=" * 50)
    
    try:
        from market_breadth_indicator import MarketBreadthIndicator
        
        indicator = MarketBreadthIndicator()
        
        print("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 50 –º–æ–Ω–µ—Ç...")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        start_time = time.time()
        data = indicator.get_market_breadth_data(fast_mode=False)
        end_time = time.time()
        
        duration = end_time - start_time
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–Ω–µ—Ç: {data['total_coins']}/50")
        print(f"üìà Market Breadth: {data['current_value']:.1f}%")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        if data['total_coins'] >= 45:
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        else:
            print("‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç - –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏")
            
        return data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Market Breadth: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á
    if not check_api_key_status():
        print("\n‚ùå API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        sys.exit(1)
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Market Breadth
    data = test_market_breadth_loading()
    
    if data:
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û: {data['total_coins']}/50 –º–æ–Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        print(f"   Market Breadth: {data['current_value']:.1f}%")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

if __name__ == "__main__":
    main()