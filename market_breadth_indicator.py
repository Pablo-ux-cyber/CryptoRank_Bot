import logging
from datetime import datetime
from typing import Dict, Optional
from crypto_analyzer_cryptocompare import CryptoAnalyzer

class MarketBreadthIndicator:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.analyzer = CryptoAnalyzer(cache=None)  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.top_n = 49  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 49 –º–æ–Ω–µ—Ç –ø–æ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç NEAR)
        self.ma_period = 200
        self.analysis_days = 547  # 1.5 –≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.last_historical_data = None
        self.last_indicator_data = None
        
    def get_market_breadth_data(self, fast_mode: bool = False) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞
        
        Args:
            fast_mode (bool): –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ 10 —Ç–æ–ø –º–æ–Ω–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –º–æ–Ω–µ—Ç (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ - –Ω–∏–∫–∞–∫–∏—Ö –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤)
            coin_count = self.top_n
            top_coins = self.analyzer.get_top_coins(coin_count)
            if not top_coins:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç")
                return None
            
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(top_coins)} —Ç–æ–ø –º–æ–Ω–µ—Ç")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = self.analyzer.load_historical_data(
                top_coins, 
                self.ma_period + self.analysis_days + 100  # –ó–∞–ø–∞—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ MA (200 + 547 + 100 = 847 –¥–Ω–µ–π)
            )
            
            if not historical_data:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                return None
            
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(historical_data)} –º–æ–Ω–µ—Ç")
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            indicator_data = self.analyzer.calculate_market_breadth(
                historical_data, 
                self.ma_period, 
                self.analysis_days
            )
            
            if indicator_data.empty:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
                return None
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            summary = self.analyzer.get_market_summary(indicator_data)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.last_historical_data = historical_data
            self.last_indicator_data = indicator_data
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è
            current_value = summary.get('current_value', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            if current_value >= 80:
                signal = "üî¥"
                condition = "Overbought"
                description = "Most coins above MA200, possible correction"
            elif current_value <= 20:
                signal = "üü¢" 
                condition = "Oversold"
                description = "Most coins below MA200, possible bounce"
            else:
                signal = "üü°"
                condition = "Neutral"
                description = "Mixed market signals"
            
            return {
                'signal': signal,
                'condition': condition,
                'description': description,
                'current_value': current_value,
                'average_value': summary.get('average_value', 0),
                'max_value': summary.get('max_value', 0),
                'min_value': summary.get('min_value', 0),
                'total_coins': len(historical_data),
                'analysis_period': self.analysis_days,
                'ma_period': self.ma_period,
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ create_quick_chart
                'historical_data': historical_data,
                'indicator_data': indicator_data
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞: {str(e)}")
            return None
    
    def format_breadth_message(self, breadth_data: Optional[Dict] = None) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            breadth_data (dict, optional): –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if breadth_data is None:
            breadth_data = self.get_market_breadth_data()
        
        if not breadth_data:
            return None
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            current_value = breadth_data['current_value']
            if current_value >= 80:
                status = "Overbought"
            elif current_value <= 20:
                status = "Oversold" 
            else:
                status = "Neutral"
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: Market by 200MA: {emoji} {Status}: {percentage}%
            message = f"Market by 200MA: {breadth_data['signal']} {status}: {current_value:.1f}%"
            
            return message
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —à–∏—Ä–∏–Ω–µ —Ä—ã–Ω–∫–∞: {str(e)}")
            return None
    
    def get_current_market_breadth(self) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞
        
        Returns:
            float: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (0-100) –∏–ª–∏ -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            breadth_data = self.get_market_breadth_data()
            if breadth_data:
                return breadth_data['current_value']
            return -1
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞: {str(e)}")
            return -1
    
    def clear_cache(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        """
        self.logger.info("–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –æ—á–∏—â–∞—Ç—å")