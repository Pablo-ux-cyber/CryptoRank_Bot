import logging
from datetime import datetime
from typing import Dict, Optional
from crypto_analyzer_cryptocompare import CryptoAnalyzer

class MarketBreadthIndicator:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à–∏—Ä–∏–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.analyzer = CryptoAnalyzer(cache=None)  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.top_n = 50
        self.ma_period = 200
        self.analysis_days = 30  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        
    def get_market_breadth_data(self) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞
        
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –º–æ–Ω–µ—Ç
            top_coins = self.analyzer.get_top_coins(self.top_n)
            if not top_coins:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –º–æ–Ω–µ—Ç")
                return None
            
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(top_coins)} —Ç–æ–ø –º–æ–Ω–µ—Ç")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = self.analyzer.load_historical_data(
                top_coins, 
                self.ma_period + self.analysis_days + 50  # –ó–∞–ø–∞—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ MA
            )
            
            if not historical_data:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                return None
            
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(historical_data)} –º–æ–Ω–µ—Ç")
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            indicator_data = self.analyzer.calculate_market_breadth(
                historical_data, 
                self.ma_period, 
                self.analysis_days
            )
            
            if indicator_data.empty:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä")
                return None
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            summary = self.analyzer.get_market_summary(indicator_data)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è
            current_value = summary.get('current_value', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            if current_value >= 80:
                signal = "üî¥"
                condition = "–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
                description = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤—ã—à–µ MA200, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
            elif current_value <= 20:
                signal = "üü¢" 
                condition = "–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
                description = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∏–∂–µ MA200, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫"
            else:
                signal = "üü°"
                condition = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
                description = "–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä—ã–Ω–∫–∞"
            
            return {
                'signal': signal,
                'condition': condition,
                'description': description,
                'current_value': current_value,
                'average_value': summary.get('average_value', 0),
                'max_value': summary.get('max_value', 0),
                'min_value': summary.get('min_value', 0),
                'total_coins': len(historical_data),
                'analysis_period': self.analysis_days,
                'ma_period': self.ma_period
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞: {str(e)}")
            return None
    
    def format_breadth_message(self, breadth_data: Optional[Dict] = None) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            breadth_data (dict, optional): –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–ª–∏ None –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if breadth_data is None:
            breadth_data = self.get_market_breadth_data()
        
        if not breadth_data:
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"""üìä **–®–∏—Ä–∏–Ω–∞ —Ä—ã–Ω–∫–∞ (MA{breadth_data['ma_period']})**

{breadth_data['signal']} **{breadth_data['condition']}**: {breadth_data['current_value']:.1f}%

{breadth_data['description']}

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({breadth_data['analysis_period']}–¥):**
‚Ä¢ –¢–µ–∫—É—â–∏–π: {breadth_data['current_value']:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {breadth_data['average_value']:.1f}%
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {breadth_data['max_value']:.1f}%
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {breadth_data['min_value']:.1f}%

üìã –ê–Ω–∞–ª–∏–∑ {breadth_data['total_coins']} —Ç–æ–ø –º–æ–Ω–µ—Ç"""
            
            return message
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —à–∏—Ä–∏–Ω–µ —Ä—ã–Ω–∫–∞: {str(e)}")
            return None
    
    def get_current_market_breadth(self) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞
        
        Returns:
            float: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (0-100) –∏–ª–∏ -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            breadth_data = self.get_market_breadth_data()
            if breadth_data:
                return breadth_data['current_value']
            return -1
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞: {str(e)}")
            return -1
    
    def clear_cache(self):
        """
        –û—á–∏—â–∞–µ—Ç –∫–µ—à –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            self.cache.clear_all()
            self.logger.info("–ö–µ—à –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã —Ä—ã–Ω–∫–∞ –æ—á–∏—â–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {str(e)}")