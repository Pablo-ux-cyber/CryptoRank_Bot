import time
from datetime import datetime, timedelta
import pandas as pd
from pytrends.request import TrendReq
from logger import logger

class GoogleTrendsPulse:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è Google Trends Pulse –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        self.pytrends = TrendReq(hl='en-US', tz=360)
        self.crypto_keywords = [
            "Bitcoin", 
            "Ethereum", 
            "Crypto", 
            "Buy Bitcoin", 
            "Cryptocurrency"
        ]
        # –í—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API Google Trends (—Å–µ–∫) - –∏–∑–±–µ–≥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.request_delay = 1
        
    def get_trending_data(self, timeframe='now 1-d'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        
        Args:
            timeframe (str): –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Google Trends 
                             (now 1-d, now 7-d, today 1-m, today 3-m, today 12-m, today 5-y)
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Google Trends –¥–ª—è {len(self.crypto_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            trends_data = {}
            max_values = {}
            current_values = {}
            change_pct = {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for keyword in self.crypto_keywords:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {keyword}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                self.pytrends.build_payload([keyword], cat=0, timeframe=timeframe)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(self.request_delay)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
                interest_over_time = self.pytrends.interest_over_time()
                
                if interest_over_time.empty:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ {keyword}")
                    continue
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
                trend_series = interest_over_time[keyword]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                trends_data[keyword] = trend_series.tolist()
                
                # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
                max_values[keyword] = trend_series.max()
                
                # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–µ—Ä–∏–∏)
                current_values[keyword] = trend_series.iloc[-1]
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
                if len(trend_series) > 1:
                    previous = trend_series.iloc[-2]
                    current = trend_series.iloc[-1]
                    
                    if previous > 0:
                        pct_change = ((current - previous) / previous) * 100
                    else:
                        pct_change = 0 if current == 0 else 100
                        
                    change_pct[keyword] = round(pct_change, 2)
                else:
                    change_pct[keyword] = 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "timeframe": timeframe,
                "trends_data": trends_data,
                "max_values": max_values,
                "current_values": current_values,
                "change_pct": change_pct,
                "keywords": self.crypto_keywords
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if current_values:
                avg_interest = sum(current_values.values()) / len(current_values)
                avg_change = sum(change_pct.values()) / len(change_pct)
                
                result["average_interest"] = round(avg_interest, 2)
                result["average_change"] = round(avg_change, 2)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–ø—É–ª—å—Å" —Ç—Ä–µ–Ω–¥–∞
                if avg_change > 50:
                    pulse_status = "Very High Activity"
                    pulse_emoji = "üî•"
                elif avg_change > 20:
                    pulse_status = "High Activity"
                    pulse_emoji = "üìà"
                elif avg_change > 5:
                    pulse_status = "Moderate Growth"
                    pulse_emoji = "üìä"
                elif avg_change < -20:
                    pulse_status = "Sharp Decline"
                    pulse_emoji = "üìâ"
                elif avg_change < -5:
                    pulse_status = "Moderate Decline"
                    pulse_emoji = "üîª"
                else:
                    pulse_status = "Stable"
                    pulse_emoji = "‚û°Ô∏è"
                
                result["pulse_status"] = pulse_status
                result["pulse_emoji"] = pulse_emoji
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ Google Trends —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã, —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å: {result.get('average_interest', 'N/A')}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Google Trends: {str(e)}")
            return None
    
    def format_trends_message(self, trends_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Google Trends –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
        
        Args:
            trends_data (dict): –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –º–µ—Ç–æ–¥–∞ get_trending_data
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        if not trends_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Google Trends."
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message = f"üîç *Google Trends Pulse*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ø—É–ª—å—Å" –∑–∞–ø—Ä–æ—Å–æ–≤
        pulse_emoji = trends_data.get("pulse_emoji", "‚ùì")
        pulse_status = trends_data.get("pulse_status", "Unknown")
        message += f"{pulse_emoji} *Status:* {pulse_status}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        message += "*Keywords Activity:*\n"
        
        current_values = trends_data.get("current_values", {})
        change_pct = trends_data.get("change_pct", {})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_keywords = sorted(
            current_values.keys(), 
            key=lambda k: current_values[k], 
            reverse=True
        )
        
        for keyword in sorted_keywords:
            current = current_values.get(keyword, 0)
            change = change_pct.get(keyword, 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if change > 15:
                change_emoji = "üî•"
            elif change > 5:
                change_emoji = "üìà"
            elif change < -15:
                change_emoji = "üìâ"
            elif change < -5:
                change_emoji = "üîª"
            else:
                change_emoji = "‚û°Ô∏è"
                
            # –û—Ñ–æ—Ä–º–ª—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Telegram
            message += f"{change_emoji} *{keyword}*: {current}/100 "
            if change != 0:
                sign = "+" if change > 0 else ""
                message += f"({sign}{change}%)\n"
            else:
                message += "(no change)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        avg_interest = trends_data.get("average_interest", "N/A")
        avg_change = trends_data.get("average_change", "N/A")
        
        message += f"\nüìä *Average Interest:* {avg_interest}/100"
        if avg_change != "N/A":
            sign = "+" if avg_change > 0 else ""
            message += f" ({sign}{avg_change}%)"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        timestamp = trends_data.get("timestamp", "N/A")
        timeframe = trends_data.get("timeframe", "N/A")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timeframe –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        if timeframe == "now 1-d":
            readable_timeframe = "last 24 hours"
        elif timeframe == "now 7-d":
            readable_timeframe = "last 7 days"
        elif timeframe == "today 1-m":
            readable_timeframe = "last month"
        elif timeframe == "today 3-m":
            readable_timeframe = "last 3 months"
        elif timeframe == "today 12-m":
            readable_timeframe = "last year"
        else:
            readable_timeframe = timeframe
            
        message += f"\n\nüïí *Period:* {readable_timeframe}"
        message += f"\nüïê *Updated:* {timestamp}"
        
        return message