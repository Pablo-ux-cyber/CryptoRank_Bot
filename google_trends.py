import time
import pandas as pd
from datetime import datetime, timedelta
from pytrends.request import TrendReq
from logger import logger

class GoogleTrendsTracker:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫–µ—Ä Google Trends –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        """
        self.pytrends = TrendReq(hl='en-US', tz=360)
        self.last_request_time = None
        self.min_request_interval = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.crypto_terms = {
            "bitcoin": {"name": "Bitcoin", "icon": "‚Çø"},
        }
        
        # –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ (–Ω–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.timeframe = 'now 7-d'
        
        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–≤–µ—Å—å –º–∏—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.geo = ''
        
        # –ö–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.results_cache = {}
        self.cache_expiry = 3600  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)

    def _respect_rate_limit(self):
        """
        –°–æ–±–ª—é–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API Google Trends
        –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        if self.last_request_time is not None:
            elapsed = time.time() - self.last_request_time
            if elapsed < self.min_request_interval:
                sleep_time = self.min_request_interval - elapsed
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.2f} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ Google Trends...")
                time.sleep(sleep_time)
        
        self.last_request_time = time.time()

    def get_interest_over_time(self, terms=None, timeframe=None, geo=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            terms (list): –°–ø–∏—Å–æ–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è 
                          (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ self.crypto_terms)
            timeframe (str): –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Google Trends 
                            (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è self.timeframe)
            geo (str): –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ '' –¥–ª—è –≤—Å–µ–≥–æ –º–∏—Ä–∞
                      (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è self.geo)
                      
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç–µ—Ä–º–∏–Ω–∞–º –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            if terms is None:
                terms = list(self.crypto_terms.keys())
            
            if timeframe is None:
                timeframe = self.timeframe
                
            if geo is None:
                geo = self.geo
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ
            cache_key = f"{','.join(sorted(terms))};{timeframe};{geo}"
            
            if cache_key in self.results_cache:
                cache_entry = self.results_cache[cache_key]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–µ—à–∞
                if time.time() - cache_entry['timestamp'] < self.cache_expiry:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤: {', '.join(terms)}")
                    return cache_entry['data']
            
            # –°–æ–±–ª—é–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API
            self._respect_rate_limit()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google Trends
            logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö Google Trends –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤: {', '.join(terms)}")
            
            # –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞ —Ä–∞–∑
            if len(terms) > 5:
                logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ ({len(terms)}), –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 5")
                terms = terms[:5]
            
            self.pytrends.build_payload(terms, cat=0, timeframe=timeframe, geo=geo)
            data = self.pytrends.interest_over_time()
            
            if data.empty:
                logger.warning(f"Google Trends –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤: {', '.join(terms)}")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            results = {
                'timeframe': timeframe,
                'geo': geo,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'terms': {},
                'raw_data': data.to_dict()
            }
            
            for term in terms:
                if term in data.columns:
                    term_data = data[term].to_dict()
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ä–µ–¥–Ω–µ–µ, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    values = list(term_data.values())
                    avg_value = sum(values) / len(values) if values else 0
                    min_value = min(values) if values else 0
                    max_value = max(values) if values else 0
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ/–Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)
                    last_value = values[-1] if values else 0
                    last_date = list(term_data.keys())[-1] if term_data else None
                    
                    term_info = self.crypto_terms.get(term, {"name": term, "icon": "üìä"})
                    
                    results['terms'][term] = {
                        'name': term_info['name'],
                        'icon': term_info['icon'],
                        'average': avg_value,
                        'min': min_value,
                        'max': max_value,
                        'last_value': last_value,
                        'last_date': last_date.strftime('%Y-%m-%d') if last_date else None,
                        'trend': 'up' if last_value > avg_value else 'down' if last_value < avg_value else 'stable'
                    }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–µ—à
            self.results_cache[cache_key] = {
                'timestamp': time.time(),
                'data': results
            }
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Google Trends: {str(e)}")
            return None

    def format_trends_message(self, trends_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–∞ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            trends_data (dict): –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        """
        if not trends_data or 'terms' not in trends_data or not trends_data['terms']:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Google Trends."
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        timeframe = trends_data.get('timeframe', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        timeframe_display = timeframe.replace('now ', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ ').replace('-d', ' –¥–Ω–µ–π')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ Bitcoin
        bitcoin_data = trends_data['terms'].get('bitcoin')
        if not bitcoin_data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ Bitcoin –≤ Google Trends."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        value = int(bitcoin_data['last_value'])
        if value >= 70:
            level_icon = "üü¢"
            level_text = "–í–´–°–û–ö–ò–ô"
        elif value >= 40:
            level_icon = "üü°"
            level_text = "–°–†–ï–î–ù–ò–ô"
        else:
            level_icon = "üî¥"
            level_text = "–ù–ò–ó–ö–ò–ô"
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        trend_icon = "üîº" if bitcoin_data['trend'] == 'up' else "üîΩ" if bitcoin_data['trend'] == 'down' else "‚û°Ô∏è"
        trend_text = "–†–ê–°–¢–Å–¢" if bitcoin_data['trend'] == 'up' else "–ü–ê–î–ê–ï–¢" if bitcoin_data['trend'] == 'down' else "–°–¢–ê–ë–ò–õ–ï–ù"
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = self._generate_progress_bar(value, 100, 10)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        message = f"üìä *BITCOIN TRENDS PULSE* ({timeframe_display})\n\n"
        message += f"‚Çø –ò–Ω—Ç–µ—Ä–µ—Å: {level_icon} *{value}/100* {trend_icon}\n"
        message += f"üìà –¢—Ä–µ–Ω–¥: *{trend_text}*\n"
        message += f"‚è±Ô∏è –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ: {trend_icon} {trend_text}\n"
        message += f"{progress_bar}\n\n"
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        compact_message = f"‚Çø *BITCOIN PULSE*: {level_icon}{value} {trend_icon} | {level_text} –ò–ù–¢–ï–†–ï–°, {trend_text}\n"
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –º–∞–∫—Å–∏–º—É–º—É/–º–∏–Ω–∏–º—É–º—É
        avg_value = int(bitcoin_data['average'])
        min_value = int(bitcoin_data['min'])
        max_value = int(bitcoin_data['max'])
        
        pct_from_min = int(((value - min_value) / (max_value - min_value if max_value > min_value else 1)) * 100) if min_value < value else 0
        pct_from_avg = int(((value - avg_value) / avg_value if avg_value > 0 else 0) * 100)
        
        analytical_message = f"‚Çø *BITCOIN* ({bitcoin_data['last_date']}): {value}/100 ({pct_from_avg:+d}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)\n"
        analytical_message += f"–ú–∏–Ω: {min_value} | –°—Ä–µ–¥: {avg_value} | –ú–∞–∫—Å: {max_value} | –¢–µ–∫—É—â–∏–π: {value} ({pct_from_min}% –¥–∏–∞–ø–∞–∑–æ–Ω–∞)\n"
        analytical_message += f"{progress_bar}\n\n"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_message = message + "---\n" + compact_message + "\n---\n" + analytical_message
        
        return full_message

    def _generate_progress_bar(self, value, max_value, length, filled_char="‚ñà", empty_char="‚ñë"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        
        Args:
            value (int): –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            max_value (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            length (int): –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            filled_char (str): –°–∏–º–≤–æ–ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
            empty_char (str): –°–∏–º–≤–æ–ª –¥–ª—è –ø—É—Å—Ç–æ–π —á–∞—Å—Ç–∏
            
        Returns:
            str: –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if value >= 70:
            filled_char = "üü¢"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        elif value >= 40:
            filled_char = "üü°"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π 
        else:
            filled_char = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        filled_length = int(length * (value / max_value))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar = filled_char * filled_length + empty_char * (length - filled_length)
        
        return bar